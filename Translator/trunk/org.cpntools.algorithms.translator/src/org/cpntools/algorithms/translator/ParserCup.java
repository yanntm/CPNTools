
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 15 12:01:07 CET 2011
//----------------------------------------------------

package org.cpntools.algorithms.translator;

import java.util.List;
import java.util.ArrayList;
import org.cpntools.algorithms.translator.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 15 12:01:07 CET 2011
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\005\014\000\002\012\004\000" +
    "\002\012\003\000\002\013\005\000\002\013\003\000\002" +
    "\013\002\000\002\006\005\000\002\006\006\000\002\006" +
    "\011\000\002\006\014\000\002\006\011\000\002\006\014" +
    "\000\002\006\010\000\002\006\010\000\002\006\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\007\004\000\002\007\003\000\002\015\003" +
    "\000\002\015\005\000\002\015\004\000\002\015\003\000" +
    "\002\015\005\000\002\015\004\000\002\015\004\000\002" +
    "\015\003\000\002\010\006\000\002\010\005\000\002\011" +
    "\005\000\002\011\005\000\002\014\005\000\002\014\003" +
    "\000\002\016\004\000\002\016\004\000\002\016\003\000" +
    "\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\032\002\ufffe\004\023\005\005\010\010\012" +
    "\007\015\024\020\022\024\014\030\026\032\011\040\021" +
    "\041\016\001\002\000\032\002\ufffc\004\ufffc\005\ufffc\010" +
    "\ufffc\012\ufffc\015\ufffc\020\ufffc\024\ufffc\030\ufffc\032\ufffc" +
    "\040\ufffc\041\ufffc\001\002\000\004\041\uffe5\001\002\000" +
    "\004\041\164\001\002\000\012\007\043\033\044\041\040" +
    "\042\046\001\002\000\004\041\151\001\002\000\012\007" +
    "\043\033\044\041\040\042\046\001\002\000\004\002\001" +
    "\001\002\000\032\002\ufffd\004\ufffd\005\ufffd\010\ufffd\012" +
    "\ufffd\015\ufffd\020\ufffd\024\ufffd\030\ufffd\032\ufffd\040\ufffd" +
    "\041\ufffd\001\002\000\012\007\043\033\044\041\040\042" +
    "\046\001\002\000\004\002\133\001\002\000\012\006\127" +
    "\033\037\035\126\041\uffe7\001\002\000\004\040\125\001" +
    "\002\000\032\002\ufffe\004\023\005\005\010\010\012\007" +
    "\015\024\020\022\024\014\030\026\032\011\040\021\041" +
    "\016\001\002\000\050\002\uffe8\004\uffe8\005\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8\020\uffe8\021" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\040\uffe8\041\uffe8\001\002\000\004\041\106\001\002\000" +
    "\004\041\uffe6\001\002\000\004\017\075\001\002\000\010" +
    "\006\034\036\072\040\033\001\002\000\004\040\027\001" +
    "\002\000\026\004\023\005\005\010\010\012\007\015\024" +
    "\024\014\030\026\032\011\040\021\041\016\001\002\000" +
    "\004\031\067\001\002\000\044\004\023\005\005\010\010" +
    "\011\uffe3\012\007\013\uffe3\015\024\016\uffe3\021\uffe3\024" +
    "\014\025\uffe3\026\uffe3\030\026\031\uffe3\032\011\040\021" +
    "\041\016\001\002\000\006\006\034\040\033\001\002\000" +
    "\050\002\uffeb\004\uffeb\005\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\013\uffeb\015\uffeb\016\uffeb\020\uffeb\021\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\040\uffeb\041\uffeb" +
    "\001\002\000\004\041\035\001\002\000\004\033\037\001" +
    "\002\000\050\002\uffe9\004\uffe9\005\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\040\uffe9" +
    "\041\uffe9\001\002\000\014\007\043\033\044\034\041\041" +
    "\040\042\046\001\002\000\024\006\uffdf\014\uffdf\027\uffdf" +
    "\033\037\034\uffdf\037\uffdf\040\uffdf\041\054\042\056\001" +
    "\002\000\064\002\uffd9\004\uffd9\005\uffd9\006\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020" +
    "\uffd9\021\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\001\002\000\004\034\064\001\002\000\012\007\043" +
    "\033\044\041\040\042\046\001\002\000\012\007\043\033" +
    "\044\041\040\042\046\001\002\000\016\006\uffe2\014\uffe2" +
    "\027\uffe2\034\uffe2\037\uffe2\040\uffe2\001\002\000\022\006" +
    "\uffdb\014\uffdb\027\uffdb\034\uffdb\037\uffdb\040\uffdb\041\054" +
    "\042\056\001\002\000\010\006\051\034\uffd5\037\050\001" +
    "\002\000\012\007\043\033\044\041\040\042\046\001\002" +
    "\000\004\041\035\001\002\000\016\006\uffde\014\uffde\027" +
    "\uffde\034\uffde\037\uffde\040\uffde\001\002\000\004\034\uffd6" +
    "\001\002\000\022\006\uffd2\014\uffd2\027\uffd2\034\uffd2\037" +
    "\uffd2\040\uffd2\041\054\042\056\001\002\000\016\006\uffdc" +
    "\014\uffdc\027\uffdc\034\uffdc\037\uffdc\040\uffdc\001\002\000" +
    "\022\006\uffd1\014\uffd1\027\uffd1\034\uffd1\037\uffd1\040\uffd1" +
    "\041\054\042\056\001\002\000\016\006\uffd3\014\uffd3\027" +
    "\uffd3\034\uffd3\037\uffd3\040\uffd3\001\002\000\016\006\uffd4" +
    "\014\uffd4\027\uffd4\034\uffd4\037\uffd4\040\uffd4\001\002\000" +
    "\006\006\051\034\062\001\002\000\016\006\uffe1\014\uffe1" +
    "\027\uffe1\034\uffe1\037\uffe1\040\uffe1\001\002\000\016\006" +
    "\051\014\uffe0\027\uffe0\034\uffe0\037\uffe0\040\uffe0\001\002" +
    "\000\064\002\uffda\004\uffda\005\uffda\006\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda" +
    "\021\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\034\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\001\002\000\016\006\uffdd\014\uffdd\027\uffdd\034\uffdd\037" +
    "\uffdd\040\uffdd\001\002\000\020\011\uffe4\013\uffe4\016\uffe4" +
    "\021\uffe4\025\uffe4\026\uffe4\031\uffe4\001\002\000\012\007" +
    "\043\033\044\041\040\042\046\001\002\000\006\006\051" +
    "\040\071\001\002\000\050\002\uffee\004\uffee\005\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee\020\uffee" +
    "\021\uffee\024\uffee\025\uffee\026\uffee\030\uffee\031\uffee\032" +
    "\uffee\040\uffee\041\uffee\001\002\000\004\041\035\001\002" +
    "\000\004\040\uffd8\001\002\000\006\036\072\040\uffd7\001" +
    "\002\000\004\041\076\001\002\000\004\023\077\001\002" +
    "\000\012\007\043\033\044\041\040\042\046\001\002\000" +
    "\006\006\051\014\101\001\002\000\004\040\102\001\002" +
    "\000\026\004\023\005\005\010\010\012\007\015\024\024" +
    "\014\030\026\032\011\040\021\041\016\001\002\000\004" +
    "\016\104\001\002\000\004\040\105\001\002\000\050\002" +
    "\uffef\004\uffef\005\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\015\uffef\016\uffef\020\uffef\021\uffef\024\uffef\025\uffef\026" +
    "\uffef\030\uffef\031\uffef\032\uffef\040\uffef\041\uffef\001\002" +
    "\000\004\033\107\001\002\000\006\034\ufff5\041\110\001" +
    "\002\000\010\034\ufff8\037\ufff8\041\123\001\002\000\004" +
    "\034\115\001\002\000\006\034\ufff6\037\113\001\002\000" +
    "\006\034\ufff5\041\110\001\002\000\004\034\ufff7\001\002" +
    "\000\004\022\116\001\002\000\004\040\117\001\002\000" +
    "\026\004\023\005\005\010\010\012\007\015\024\024\014" +
    "\030\026\032\011\040\021\041\016\001\002\000\004\021" +
    "\121\001\002\000\004\040\122\001\002\000\032\002\ufffa" +
    "\004\ufffa\005\ufffa\010\ufffa\012\ufffa\015\ufffa\020\ufffa\024" +
    "\ufffa\030\ufffa\032\ufffa\040\ufffa\041\ufffa\001\002\000\006" +
    "\034\ufff9\037\ufff9\001\002\000\004\002\uffff\001\002\000" +
    "\032\002\ufffb\004\ufffb\005\ufffb\010\ufffb\012\ufffb\015\ufffb" +
    "\020\ufffb\024\ufffb\030\ufffb\032\ufffb\040\ufffb\041\ufffb\001" +
    "\002\000\012\007\043\033\044\041\040\042\046\001\002" +
    "\000\004\041\035\001\002\000\050\002\uffea\004\uffea\005" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea" +
    "\020\uffea\021\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031" +
    "\uffea\032\uffea\040\uffea\041\uffea\001\002\000\006\006\051" +
    "\040\132\001\002\000\050\002\ufff3\004\ufff3\005\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\020\ufff3" +
    "\021\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\040\ufff3\041\ufff3\001\002\000\004\002\000\001\002" +
    "\000\006\006\051\027\135\001\002\000\004\040\136\001" +
    "\002\000\026\004\023\005\005\010\010\012\007\015\024" +
    "\024\014\030\026\032\011\040\021\041\016\001\002\000" +
    "\006\025\140\026\141\001\002\000\004\040\143\001\002" +
    "\000\004\040\142\001\002\000\050\002\ufff2\004\ufff2\005" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2" +
    "\020\ufff2\021\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\040\ufff2\041\ufff2\001\002\000\026\004\023" +
    "\005\005\010\010\012\007\015\024\024\014\030\026\032" +
    "\011\040\021\041\016\001\002\000\004\026\145\001\002" +
    "\000\004\040\146\001\002\000\050\002\ufff1\004\ufff1\005" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1" +
    "\020\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\040\ufff1\041\ufff1\001\002\000\006\006\051" +
    "\040\150\001\002\000\050\002\uffec\004\uffec\005\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016\uffec\020\uffec" +
    "\021\uffec\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec\032" +
    "\uffec\040\uffec\041\uffec\001\002\000\004\040\152\001\002" +
    "\000\026\004\023\005\005\010\010\012\007\015\024\024" +
    "\014\030\026\032\011\040\021\041\016\001\002\000\004" +
    "\011\154\001\002\000\004\040\155\001\002\000\050\002" +
    "\uffed\004\uffed\005\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\015\uffed\016\uffed\020\uffed\021\uffed\024\uffed\025\uffed\026" +
    "\uffed\030\uffed\031\uffed\032\uffed\040\uffed\041\uffed\001\002" +
    "\000\006\006\051\014\157\001\002\000\004\040\160\001" +
    "\002\000\026\004\023\005\005\010\010\012\007\015\024" +
    "\024\014\030\026\032\011\040\021\041\016\001\002\000" +
    "\004\013\162\001\002\000\004\040\163\001\002\000\050" +
    "\002\ufff0\004\ufff0\005\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\030\ufff0\031\ufff0\032\ufff0\040\ufff0\041\ufff0\001" +
    "\002\000\004\040\165\001\002\000\050\002\ufff4\004\ufff4" +
    "\005\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016" +
    "\ufff4\020\ufff4\021\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\040\ufff4\041\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\022\002\014\003\017\004\011\005\012\006" +
    "\003\010\024\011\016\017\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\044\015" +
    "\155\001\001\000\002\001\001\000\006\010\044\015\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\044\015\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\017\004\123\005\012\006" +
    "\003\010\024\011\016\017\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\030\007\027" +
    "\010\031\017\005\001\001\000\002\001\001\000\012\006" +
    "\030\007\065\010\031\017\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\044\014\041\015\046" +
    "\001\001\000\004\016\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\044\015\062\001\001\000\006" +
    "\010\044\015\060\001\001\000\002\001\001\000\004\016" +
    "\054\001\001\000\002\001\001\000\010\010\044\014\052" +
    "\015\046\001\001\000\004\010\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\057\001\001\000\002" +
    "\001\001\000\004\016\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\044\015\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\073\011\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\044\015\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\030\007\102\010\031" +
    "\017\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\111\013\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\111\013\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\030\007" +
    "\117\010\031\017\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\044\015\130\001\001" +
    "\000\004\010\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\030\007\136\010\031\017" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\030\007\143\010" +
    "\031\017\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\030\007\152\010\031\017\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\030" +
    "\007\160\010\031\017\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/**
	 * @see java_cup.runtime.lr_parser#report_error(java.lang.String, java.lang.Object)
	 */
	public void report_error(String message, Object info) { /* Ignore simple error */
	}

	/**
	 * @see java_cup.runtime.lr_parser#report_fatal_error(java.lang.String, java.lang.Object)
	 */
	public void report_fatal_error(String message, Object info) throws Exception {
		StringBuilder m = new StringBuilder("Error");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

			if (s.left >= 0) {
				m.append(" in line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}

		m.append(" : "+message);

		throw new SyntaxParserException(m.toString());
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // whatever ::= CHAR 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = c; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("whatever",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // whatever ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("whatever",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // whatever ::= CHAR whatever 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = c + w; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("whatever",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // whatever ::= ID whatever 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i + w; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("whatever",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // values ::= expression 
            {
              List<Expression> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ArrayList<Expression>(); RESULT.add(v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("values",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // values ::= expression COMMA values 
            {
              List<Expression> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Expression> vv = (List<Expression>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = vv; vv.add(v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("values",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // invocations ::= invocation PARALLEL invocation 
            {
              List<Invocation> RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Invocation i1 = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Invocation i2 = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ArrayList<Invocation>(); RESULT.add(i2); RESULT.add(i1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("invocations",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // invocations ::= invocation PARALLEL invocations 
            {
              List<Invocation> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Invocation i = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Invocation> ii = (List<Invocation>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = ii; ii.add(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("invocations",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // invocation ::= ID LPAREN RPAREN 
            {
              Invocation RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Invocation(name, new ArrayList<Expression>()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("invocation",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // invocation ::= ID LPAREN values RPAREN 
            {
              Invocation RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<Expression> v = (List<Expression>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Invocation(name, v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("invocation",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= CHAR 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Whatever(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= CHAR whatever 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Whatever(i + w); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= ID whatever 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Whatever(i + w); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression DOT invocation 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Invocation i = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new MethodInvocation(e, i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= ID 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Variable(name); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= invocation 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Invocation i = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statements ::= statement 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ArrayList<Statement>(); if (s != null) RESULT.add(s); if (s != null) s.setPosition(sleft, sright); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statements ::= statement statements 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = ss; if (s != null) ss.add(s);  if (s != null) s.setPosition(sleft, sright); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= INT 
            {
              String RESULT =null;
		 RESULT = "INT"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "BOOL"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= NEWLINE 
            {
              Statement RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= invocation DOT invocation 
            {
              Statement RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Invocation i1 = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Invocation i2 = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new MethodInvocation(i1, i2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= ID DOT invocation 
            {
              Statement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Invocation i = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new MethodInvocation(new Variable(name), i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= invocation NEWLINE 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Invocation i = (Invocation)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= RETURN expression NEWLINE 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Return(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= LOCK ID NEWLINE statements UNLOCK NEWLINE 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Lock(l, s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= REPEAT NEWLINE statements UNTIL expression NEWLINE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression w = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Repeat(s, w); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= FOR ALL ID IN expression DO NEWLINE statements ENDFOR NEWLINE 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Expression w = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new ForAll(w, i, s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= WHILE expression DO NEWLINE statements ENDWHILE NEWLINE 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Expression w = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new While(w, s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= IF expression THEN NEWLINE statements ELSE NEWLINE statements ENDIF NEWLINE 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		Expression w = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		List<Statement> s1 = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Statement> s2 = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new IfElse(w, s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= IF expression THEN NEWLINE statements ENDIF NEWLINE 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Expression w = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new IfElse(w, s, new ArrayList<Statement>()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= ID ASSIGN expression NEWLINE 
            {
              Statement RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Expression w = (Expression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Assignment(name, w); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= type ID NEWLINE 
            {
              Statement RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Declaration(type, name); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameters ::= 
            {
              List<Declaration> RESULT =null;
		 RESULT = new ArrayList<Declaration>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameters ::= parameter 
            {
              List<Declaration> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Declaration p = (Declaration)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new ArrayList<Declaration>(); RESULT.add(p); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameters ::= parameter COMMA parameters 
            {
              List<Declaration> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Declaration p = (Declaration)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<Declaration> pp = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = pp; pp.add(p); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter ::= ID 
            {
              Declaration RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Declaration(name); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameter",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter ::= ID ID 
            {
              Declaration RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Declaration(type, name); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameter",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedure ::= PROC ID LPAREN parameters RPAREN IS NEWLINE statements ENDPROC NEWLINE 
            {
              Procedure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		List<Declaration> p = (List<Declaration>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Procedure(name, p, s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("procedure",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-9)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // toplevel ::= invocations NEWLINE 
            {
              TopLevel RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		List<Invocation> i = (List<Invocation>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Launch(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("toplevel",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // toplevel ::= statement 
            {
              TopLevel RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s;  if (s!= null) s.setPosition(sleft, sright); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("toplevel",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // toplevel ::= procedure 
            {
              TopLevel RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Procedure p = (Procedure)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = p; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("toplevel",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // toplevels ::= 
            {
              List<TopLevel> RESULT =null;
		 RESULT = new ArrayList<TopLevel>(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("toplevels",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // toplevels ::= toplevel toplevels 
            {
              List<TopLevel> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		TopLevel t = (TopLevel)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<TopLevel> s = (List<TopLevel>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s; if (t != null) s.add(t); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("toplevels",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= toplevels 
            {
              Program RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		List<TopLevel> t = (List<TopLevel>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Program(t); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

