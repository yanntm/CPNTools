
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 03 15:35:56 CEST 2013
//----------------------------------------------------

package org.cpntools.grader.model.btl.parser;

import org.cpntools.grader.model.btl.model.*;
import java.util.HashMap;
import java.util.Map;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 03 15:35:56 CEST 2013
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\003\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\006\000" +
    "\002\003\010\000\002\003\006\000\002\003\010\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\012" +
    "\000\002\003\011\000\002\003\007\000\002\003\007\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\005\000\002\003\006\000\002\004\006\000\002\005" +
    "\002\000\002\005\003\000\002\005\003\000\002\002\005" +
    "\000\002\002\007\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\012" +
    "\005\000\002\011\005\000\002\011\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\005\000\002\007\003\000\002" +
    "\007\005\000\002\007\006\000\002\007\003\000\002\007" +
    "\003\000\002\007\004\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\010\003\000\002\010\005\000" +
    "\002\006\002\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\036\004\013\010\007\013\024\015\017\017" +
    "\010\020\006\021\020\022\012\023\021\041\005\043\023" +
    "\044\011\046\014\050\016\001\002\000\004\020\153\001" +
    "\002\000\004\010\223\001\002\000\014\004\143\017\010" +
    "\022\012\023\021\046\014\001\002\000\064\004\063\010" +
    "\007\011\uffe5\012\067\013\024\015\017\017\061\020\006" +
    "\021\020\022\012\023\021\025\uffc4\026\uffc4\030\065\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\041\005\043\023" +
    "\044\011\046\014\047\070\050\016\001\002\000\014\004" +
    "\143\017\010\022\012\023\021\046\014\001\002\000\004" +
    "\006\212\001\002\000\030\002\uffcc\005\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\027\uffcc\041\uffcc" +
    "\042\uffcc\001\002\000\036\004\013\010\007\013\024\015" +
    "\133\017\010\020\006\021\020\022\012\023\021\041\005" +
    "\043\023\044\011\046\014\050\016\001\002\000\036\002" +
    "\uffc6\005\uffc6\006\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\027\uffc6\031\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\001\002\000\026\002\uffe9\005\uffe9\011\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\027\uffe9\041\uffe9\042\uffe9\001" +
    "\002\000\050\002\uffc3\005\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\020\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3" +
    "\042\uffc3\001\002\000\036\004\013\010\007\013\024\015" +
    "\017\017\010\020\006\021\020\022\012\023\021\041\005" +
    "\043\023\044\011\046\014\050\016\001\002\000\044\004" +
    "\174\012\067\017\061\020\uffc4\022\012\023\021\025\uffc4" +
    "\026\uffc4\030\065\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\046\014\047\070\050\016\001\002\000\030\002\uffcb" +
    "\005\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\027\uffcb\041\uffcb\042\uffcb\001\002\000\030\002\001" +
    "\005\001\011\001\012\141\013\001\014\001\015\001\016" +
    "\001\027\140\041\001\042\001\001\002\000\004\046\164" +
    "\001\002\000\036\004\013\010\007\013\024\015\017\017" +
    "\010\020\006\021\020\022\012\023\021\041\005\043\023" +
    "\044\011\046\014\050\016\001\002\000\022\002\052\013" +
    "\053\014\051\015\044\016\045\027\047\041\046\042\050" +
    "\001\002\000\036\002\uffcf\005\uffcf\006\030\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\027\uffcf\031\027" +
    "\040\031\041\uffcf\042\uffcf\001\002\000\004\046\043\001" +
    "\002\000\006\007\034\046\033\001\002\000\004\046\032" +
    "\001\002\000\036\002\uffc5\005\uffc5\006\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\027\uffc5\031\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\001\002\000\004\037\037\001" +
    "\002\000\030\002\uffce\005\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\027\uffce\041\uffce\042\uffce\001" +
    "\002\000\004\007\036\001\002\000\030\002\uffcd\005\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\027" +
    "\uffcd\041\uffcd\042\uffcd\001\002\000\004\046\040\001\002" +
    "\000\006\007\uffe2\045\041\001\002\000\004\046\033\001" +
    "\002\000\004\007\uffe1\001\002\000\026\002\uffe8\005\uffe8" +
    "\011\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\027\uffe8\041" +
    "\uffe8\042\uffe8\001\002\000\036\004\013\010\007\013\024" +
    "\015\017\017\010\020\006\021\020\022\012\023\021\041" +
    "\005\043\023\044\011\046\014\050\016\001\002\000\036" +
    "\004\013\010\007\013\024\015\017\017\010\020\006\021" +
    "\020\022\012\023\021\041\005\043\023\044\011\046\014" +
    "\050\016\001\002\000\004\010\156\001\002\000\036\004" +
    "\013\010\007\013\024\015\017\017\010\020\006\021\020" +
    "\022\012\023\021\041\005\043\023\044\011\046\014\050" +
    "\016\001\002\000\004\010\057\001\002\000\040\004\013" +
    "\010\007\013\024\015\017\017\010\020\006\021\020\022" +
    "\012\023\021\024\055\041\005\043\023\044\011\046\014" +
    "\050\016\001\002\000\004\002\000\001\002\000\036\004" +
    "\013\010\007\013\024\015\017\017\010\020\006\021\020" +
    "\022\012\023\021\041\005\043\023\044\011\046\014\050" +
    "\016\001\002\000\026\002\ufff3\005\ufff3\011\ufff3\013\053" +
    "\014\051\015\044\016\045\027\047\041\ufff3\042\ufff3\001" +
    "\002\000\026\002\ufff5\005\ufff5\011\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\027\ufff5\041\ufff5\042\ufff5\001\002\000" +
    "\026\002\ufff4\005\ufff4\011\ufff4\013\ufff4\014\051\015\ufff4" +
    "\016\045\027\047\041\ufff4\042\ufff4\001\002\000\064\004" +
    "\063\010\007\011\uffe5\012\067\013\024\015\017\017\061" +
    "\020\006\021\020\022\012\023\021\025\uffc4\026\uffc4\030" +
    "\065\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\041\005" +
    "\043\023\044\011\046\014\047\070\050\016\001\002\000" +
    "\024\005\uffd1\020\153\025\uffd1\026\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\001\002\000\044\004\152\012" +
    "\067\017\061\020\uffc4\022\012\023\021\025\uffc4\026\uffc4" +
    "\030\065\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\046" +
    "\014\047\070\050\016\001\002\000\022\020\110\025\106" +
    "\026\112\033\113\034\107\035\116\036\115\037\111\001" +
    "\002\000\064\004\063\005\uffc4\010\007\012\067\013\024" +
    "\015\133\017\061\020\006\021\020\022\012\023\021\025" +
    "\uffc4\026\uffc4\030\065\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\041\005\043\023\044\011\046\014\047\070\050" +
    "\016\001\002\000\010\011\uffe3\012\075\027\076\001\002" +
    "\000\050\002\uffd2\005\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\020\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\042" +
    "\uffd2\001\002\000\004\011\074\001\002\000\004\046\014" +
    "\001\002\000\050\002\uffd6\005\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\020\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\041" +
    "\uffd6\042\uffd6\001\002\000\022\011\uffe4\013\053\014\051" +
    "\015\044\016\045\027\047\041\046\042\050\001\002\000" +
    "\006\012\073\040\031\001\002\000\050\002\uffd7\005\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\041\uffd7\042\uffd7\001\002\000\026\002" +
    "\uffed\005\uffed\011\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\027\uffed\041\uffed\042\uffed\001\002\000\036\004\101\012" +
    "\067\017\100\020\uffc4\025\uffc4\026\uffc4\030\065\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\047\070\050\016\001" +
    "\002\000\036\004\101\012\067\017\100\020\uffc4\025\uffc4" +
    "\026\uffc4\030\065\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\047\070\050\016\001\002\000\050\002\uffd1\005\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\041\uffd1\042\uffd1\001\002\000\036\004" +
    "\101\012\067\017\100\020\uffc4\025\uffc4\026\uffc4\030\065" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\047\070\050" +
    "\016\001\002\000\040\004\101\005\uffc4\012\067\017\100" +
    "\020\uffc4\025\uffc4\026\uffc4\030\065\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\047\070\050\016\001\002\000\030" +
    "\002\uffdb\005\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\027\uffdb\041\uffdb\042\uffdb\001\002\000\024" +
    "\005\114\020\110\025\106\026\112\033\113\034\107\035" +
    "\116\036\115\037\111\001\002\000\010\005\105\012\075" +
    "\027\076\001\002\000\030\002\uffd8\005\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\027\uffd8\041\uffd8" +
    "\042\uffd8\001\002\000\060\002\uffc4\004\120\005\uffc4\011" +
    "\uffc4\012\067\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\065\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4\047\070\050\016" +
    "\001\002\000\046\002\uffc4\004\120\005\uffc4\011\uffc4\012" +
    "\067\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\065\041\uffc4\042\uffc4\047\070\050" +
    "\016\001\002\000\060\002\uffc4\004\120\005\uffc4\011\uffc4" +
    "\012\067\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\065\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\041\uffc4\042\uffc4\047\070\050\016\001" +
    "\002\000\046\002\uffc4\004\120\005\uffc4\011\uffc4\012\067" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\065\041\uffc4\042\uffc4\047\070\050\016" +
    "\001\002\000\060\002\uffc4\004\120\005\uffc4\011\uffc4\012" +
    "\067\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\065\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\041\uffc4\042\uffc4\047\070\050\016\001\002" +
    "\000\046\002\uffc4\004\120\005\uffc4\011\uffc4\012\067\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\065\041\uffc4\042\uffc4\047\070\050\016\001" +
    "\002\000\050\002\uffd0\005\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\020\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0" +
    "\042\uffd0\001\002\000\046\002\uffc4\004\120\005\uffc4\011" +
    "\uffc4\012\067\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\065\041\uffc4\042\uffc4\047" +
    "\070\050\016\001\002\000\046\002\uffc4\004\120\005\uffc4" +
    "\011\uffc4\012\067\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\065\041\uffc4\042\uffc4" +
    "\047\070\050\016\001\002\000\036\002\uffdf\005\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\110" +
    "\025\106\026\112\027\uffdf\041\uffdf\042\uffdf\001\002\000" +
    "\024\004\120\005\uffc4\012\067\020\uffc4\025\uffc4\026\uffc4" +
    "\030\065\047\070\050\016\001\002\000\012\005\114\020" +
    "\110\025\106\026\112\001\002\000\036\002\uffdd\005\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020" +
    "\110\025\106\026\112\027\uffdd\041\uffdd\042\uffdd\001\002" +
    "\000\036\002\uffe0\005\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\020\110\025\106\026\112\027\uffe0" +
    "\041\uffe0\042\uffe0\001\002\000\050\002\uffd5\005\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\041\uffd5\042\uffd5\001\002\000\036\002\uffdc" +
    "\005\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\020\110\025\106\026\112\027\uffdc\041\uffdc\042\uffdc" +
    "\001\002\000\050\002\uffd3\005\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\025\106\026\112" +
    "\027\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041" +
    "\uffd3\042\uffd3\001\002\000\036\002\uffde\005\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020\110\025" +
    "\106\026\112\027\uffde\041\uffde\042\uffde\001\002\000\050" +
    "\002\uffd4\005\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\020\uffd4\025\uffd4\026\uffd4\027\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\001" +
    "\002\000\030\002\uffd9\005\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\027\uffd9\041\uffd9\042\uffd9\001" +
    "\002\000\030\002\uffda\005\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\027\uffda\041\uffda\042\uffda\001" +
    "\002\000\036\004\013\010\007\013\024\015\017\017\010" +
    "\020\006\021\020\022\012\023\021\041\005\043\023\044" +
    "\011\046\014\050\016\001\002\000\024\005\137\012\141" +
    "\013\001\014\001\015\001\016\001\027\140\041\001\042" +
    "\001\001\002\000\022\005\136\013\053\014\051\015\044" +
    "\016\045\027\047\041\046\042\050\001\002\000\026\002" +
    "\ufffe\005\ufffe\011\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\027\ufffe\041\ufffe\042\ufffe\001\002\000\030\002\uffc7\005" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\027\uffc7\041\uffc7\042\uffc7\001\002\000\014\004\143\017" +
    "\010\022\012\023\021\046\014\001\002\000\014\004\143" +
    "\017\010\022\012\023\021\046\014\001\002\000\034\002" +
    "\uffcf\005\uffcf\006\030\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\027\uffcf\040\031\041\uffcf\042\uffcf\001" +
    "\002\000\014\004\143\017\010\022\012\023\021\046\014" +
    "\001\002\000\030\002\uffc8\005\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\027\uffc8\041\uffc8\042\uffc8" +
    "\001\002\000\010\005\137\012\141\027\140\001\002\000" +
    "\030\002\uffc9\005\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\027\uffc9\041\uffc9\042\uffc9\001\002\000" +
    "\022\005\uffea\013\053\014\051\015\044\016\045\027\047" +
    "\041\uffea\042\uffea\001\002\000\026\002\uffe6\005\uffe6\011" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\027\uffe6\041\uffe6" +
    "\042\uffe6\001\002\000\030\002\uffca\005\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\027\uffca\041\uffca" +
    "\042\uffca\001\002\000\046\004\152\005\uffc4\012\067\017" +
    "\061\020\uffc4\022\012\023\021\025\uffc4\026\uffc4\030\065" +
    "\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\046\014\047" +
    "\070\050\016\001\002\000\036\004\013\010\007\013\024" +
    "\015\017\017\010\020\006\021\020\022\012\023\021\041" +
    "\005\043\023\044\011\046\014\050\016\001\002\000\026" +
    "\002\ufffd\005\ufffd\011\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\027\047\041\ufffd\042\ufffd\001\002\000\026\002\ufff0" +
    "\005\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\027" +
    "\ufff0\041\ufff0\042\ufff0\001\002\000\064\004\063\010\007" +
    "\011\uffe5\012\067\013\024\015\017\017\061\020\006\021" +
    "\020\022\012\023\021\025\uffc4\026\uffc4\030\065\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\041\005\043\023\044" +
    "\011\046\014\047\070\050\016\001\002\000\004\011\160" +
    "\001\002\000\026\002\uffec\005\uffec\011\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\027\uffec\041\uffec\042\uffec\001\002" +
    "\000\026\002\ufff2\005\ufff2\011\ufff2\013\ufff2\014\051\015" +
    "\ufff2\016\045\027\047\041\ufff2\042\ufff2\001\002\000\026" +
    "\002\ufff1\005\ufff1\011\ufff1\013\053\014\051\015\044\016" +
    "\045\027\047\041\ufff1\042\ufff1\001\002\000\026\002\uffeb" +
    "\005\uffeb\011\uffeb\013\053\014\051\015\044\016\045\027" +
    "\047\041\uffeb\042\uffeb\001\002\000\004\006\165\001\002" +
    "\000\004\046\033\001\002\000\004\007\167\001\002\000" +
    "\004\004\170\001\002\000\036\004\013\010\007\013\024" +
    "\015\017\017\010\020\006\021\020\022\012\023\021\041" +
    "\005\043\023\044\011\046\014\050\016\001\002\000\022" +
    "\005\172\013\053\014\051\015\044\016\045\027\047\041" +
    "\046\042\050\001\002\000\026\002\uffef\005\uffef\011\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\027\uffef\041\uffef\042" +
    "\uffef\001\002\000\030\002\ufffb\005\ufffb\011\ufffb\012\141" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\027\140\041\ufffb\042" +
    "\ufffb\001\002\000\046\004\152\005\uffc4\012\067\017\061" +
    "\020\uffc4\022\012\023\021\025\uffc4\026\uffc4\030\065\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\046\014\047\070" +
    "\050\016\001\002\000\030\002\ufffa\005\ufffa\011\ufffa\012" +
    "\176\013\ufffa\014\ufffa\015\ufffa\016\ufffa\027\177\041\ufffa" +
    "\042\ufffa\001\002\000\044\004\152\012\067\017\061\020" +
    "\uffc4\022\012\023\021\025\uffc4\026\uffc4\030\065\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\046\014\047\070\050" +
    "\016\001\002\000\044\004\152\012\067\017\061\020\uffc4" +
    "\022\012\023\021\025\uffc4\026\uffc4\030\065\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\046\014\047\070\050\016" +
    "\001\002\000\030\002\ufff7\005\ufff7\011\ufff7\012\141\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\027\ufff7\041\ufff7\042\ufff7" +
    "\001\002\000\030\002\ufff9\005\ufff9\011\ufff9\012\141\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\027\ufff9\041\ufff9\042\ufff9" +
    "\001\002\000\010\005\105\012\203\027\204\001\002\000" +
    "\044\004\152\012\067\017\061\020\uffc4\022\012\023\021" +
    "\025\uffc4\026\uffc4\030\065\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\046\014\047\070\050\016\001\002\000\044" +
    "\004\152\012\067\017\061\020\uffc4\022\012\023\021\025" +
    "\uffc4\026\uffc4\030\065\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\046\014\047\070\050\016\001\002\000\010\005" +
    "\206\012\141\027\140\001\002\000\026\002\ufff6\005\ufff6" +
    "\011\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\027\ufff6\041" +
    "\ufff6\042\ufff6\001\002\000\010\005\210\012\141\027\140" +
    "\001\002\000\026\002\ufff8\005\ufff8\011\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\027\ufff8\041\ufff8\042\ufff8\001\002" +
    "\000\026\002\uffea\005\uffea\011\uffea\013\053\014\051\015" +
    "\044\016\045\027\047\041\uffea\042\uffea\001\002\000\004" +
    "\046\033\001\002\000\004\007\214\001\002\000\004\004" +
    "\215\001\002\000\036\004\013\010\007\013\024\015\017" +
    "\017\010\020\006\021\020\022\012\023\021\041\005\043" +
    "\023\044\011\046\014\050\016\001\002\000\022\005\217" +
    "\013\053\014\051\015\044\016\045\027\047\041\046\042" +
    "\050\001\002\000\026\002\uffee\005\uffee\011\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\027\uffee\041\uffee\042\uffee\001" +
    "\002\000\004\011\221\001\002\000\026\002\uffff\005\uffff" +
    "\011\uffff\013\uffff\014\uffff\015\uffff\016\uffff\027\uffff\041" +
    "\uffff\042\uffff\001\002\000\030\002\ufffc\005\ufffc\011\ufffc" +
    "\012\141\013\ufffc\014\ufffc\015\ufffc\016\ufffc\027\140\041" +
    "\ufffc\042\ufffc\001\002\000\064\004\063\010\007\011\uffe5" +
    "\012\067\013\024\015\017\017\061\020\006\021\020\022" +
    "\012\023\021\025\uffc4\026\uffc4\030\065\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\041\005\043\023\044\011\046" +
    "\014\047\070\050\016\001\002\000\004\011\225\001\002" +
    "\000\026\002\uffe7\005\uffe7\011\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\027\uffe7\041\uffe7\042\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\014\003\024\004\014\006\003\007\021\010" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\221\010\141\001\001\000\022\003\070\004\014\005" +
    "\217\006\057\007\021\010\025\011\061\012\063\001\001" +
    "\000\006\007\150\010\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\134\004\014\006\003\007\133" +
    "\010\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\210\004\014\006\003\007\021" +
    "\010\025\001\001\000\014\006\076\007\172\010\141\011" +
    "\061\012\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\162\004\014\006\003\007" +
    "\021\010\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\161\004\014\006\003\007" +
    "\021\010\025\001\001\000\014\003\160\004\014\006\003" +
    "\007\021\010\025\001\001\000\002\001\001\000\014\003" +
    "\154\004\014\006\003\007\021\010\025\001\001\000\002" +
    "\001\001\000\014\003\055\004\014\006\003\007\021\010" +
    "\025\001\001\000\002\001\001\000\014\003\053\004\014" +
    "\006\003\007\021\010\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\070\004\014" +
    "\005\065\006\057\007\021\010\025\011\061\012\063\001" +
    "\001\000\002\001\001\000\014\006\076\007\150\010\141" +
    "\011\061\012\130\001\001\000\002\001\001\000\020\003" +
    "\134\004\014\006\057\007\133\010\025\011\102\012\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\076\011\061\012\131\001\001\000\010" +
    "\006\076\011\061\012\101\001\001\000\002\001\001\000" +
    "\010\006\076\011\061\012\130\001\001\000\010\006\076" +
    "\011\102\012\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\076" +
    "\011\127\001\001\000\006\006\076\011\126\001\001\000" +
    "\006\006\076\011\125\001\001\000\006\006\076\011\124" +
    "\001\001\000\006\006\076\011\123\001\001\000\006\006" +
    "\076\011\122\001\001\000\002\001\001\000\006\006\076" +
    "\011\121\001\001\000\006\006\076\011\116\001\001\000" +
    "\002\001\001\000\006\006\076\011\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\146\004\014\006\003\007\021\010\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\145\010\141\001\001\000\006" +
    "\007\143\010\141\001\001\000\002\001\001\000\006\007" +
    "\144\010\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\076\007\144\010\141\011\102" +
    "\012\103\001\001\000\014\003\153\004\014\006\003\007" +
    "\021\010\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\070\004\014\005\156\006\057\007\021\010" +
    "\025\011\061\012\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\170\004\014\006" +
    "\003\007\021\010\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\076\007\144\010" +
    "\141\011\102\012\201\001\001\000\002\001\001\000\014" +
    "\006\076\007\200\010\141\011\061\012\131\001\001\000" +
    "\014\006\076\007\177\010\141\011\061\012\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\076\007\206\010\141\011\061\012\131\001\001" +
    "\000\014\006\076\007\204\010\141\011\061\012\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\215" +
    "\004\014\006\003\007\021\010\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\070\004\014\005\223\006" +
    "\057\007\021\010\025\011\061\012\063\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/**
	 * @see java_cup.runtime.lr_parser#report_error(java.lang.String, java.lang.Object)
	 */
	public void report_error(String message, Object info) { /* Ignore simple error */
	}

	/**
	 * @see java_cup.runtime.lr_parser#report_fatal_error(java.lang.String, java.lang.Object)
	 */
	public void report_fatal_error(String message, Object info) throws Exception {
		StringBuilder m = new StringBuilder("Error");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

			if (s.left >= 0) {
				m.append(" in line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}

		m.append(" : "+message);

		throw new SyntaxParserException(m.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // number ::= NUMBER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // number ::= 
            {
              Integer RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // name ::= name DOT ID 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = n + "." + i.trim(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // name ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i.trim(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simple ::= LPAREN simple RPAREN 
            {
              Simple RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simple ::= simple BAR simple 
            {
              Simple RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Simple s1 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s2 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SimpleOr(s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simple ::= simple AND simple 
            {
              Simple RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Simple s1 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s2 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SimpleAnd(s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simple ::= NOT simple 
            {
              Simple RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Not(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple ::= FALSE 
            {
              Simple RESULT =null;
		 RESULT = new Not(True.INSTANCE); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple ::= TRUE 
            {
              Simple RESULT =null;
		 RESULT = True.INSTANCE; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple ::= name LPAREN2 varlist RPAREN2 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Map<String,String> v = (Map<String,String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Binding(n, v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple ::= name LPAREN2 RPAREN2 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Transition(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple ::= name 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Transition(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // iexpression ::= LPAREN iexpression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // iexpression ::= number 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Constant(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // iexpression ::= TIME 
            {
              IExpression RESULT =null;
		 RESULT = Time.INSTANCE; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // iexpression ::= iexpression STAR iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Multiplication(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // iexpression ::= iexpression MINUS iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iexpression ::= iexpression PLUS iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iexpression ::= VAR 
            {
              IExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Variable(v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // iexpression ::= BAR name BAR 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Place(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bexpression ::= LPAREN bexpression RPAREN 
            {
              BExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = b; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bexpression ::= NOT bexpression 
            {
              BExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalNot(b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bexpression ::= bexpression BAR bexpression 
            {
              BExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b1 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b2 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalOr(b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bexpression ::= bexpression AND bexpression 
            {
              BExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b1 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b2 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalAnd(b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bexpression ::= iexpression EQUAL iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Equal(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bexpression ::= iexpression GEQ iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LessEqual(e2, e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bexpression ::= iexpression GREATER iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Less(e2, e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bexpression ::= iexpression LEQ iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LessEqual(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bexpression ::= iexpression LESS iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Less(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varlist ::= ID EQUAL ID COMMA varlist 
            {
              Map<String,String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Map<String,String> vs = (Map<String,String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = vs; vs.put(n, v); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("varlist",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varlist ::= ID EQUAL ID 
            {
              Map<String,String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Map<String, String> vs = new HashMap<String, String>(); vs.put(n, v); RESULT = vs; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("varlist",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= bexpression 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression e = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= guide 
            {
              Condition RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= 
            {
              Condition RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parenstep ::= LPAREN STEP guide RPAREN 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parenstep",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // guide ::= FINALLY LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Finally(null, c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // guide ::= name ASSIGN ID 
            {
              Guide RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SetMarking(n, i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // guide ::= parenstep 
            {
              Guide RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide p = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Future(p); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // guide ::= STEP guide 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Future(g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // guide ::= NEXT guide 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(True.INSTANCE, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // guide ::= guide FINALLY LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new And(g1, new Finally(g1, c)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // guide ::= guide FINALLYGUARD LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Finally(g1, c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // guide ::= BIND LPAREN2 varlist RPAREN2 LPAREN guide RPAREN 
            {
              Guide RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Map<String,String> vars = (Map<String,String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Bind(vars, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // guide ::= NEW ID LPAREN2 varlist RPAREN2 LPAREN guide RPAREN 
            {
              Guide RESULT =null;
		int tnameleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int tnameright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String tname = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Map<String,String> vars = (Map<String,String>)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Binder(tname, vars, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // guide ::= guide AND guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, g2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // guide ::= guide STEP guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, new Guard(g1, new Future(g2))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // guide ::= guide GUARDSTEP guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(g1, new Future(g2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // guide ::= guide NEXT guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, new Guard(g1, g2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // guide ::= guide GUARD guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(g1, g2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // guide ::= guide GUARD FAILURE 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
							if (g instanceof Simple) {
								RESULT = new Not((Simple) g);
							} else if (g instanceof Future) {
								Future f = (Future) g;
								if (f.getConstraint() instanceof Simple) {
									RESULT = new Always(null, new Not((Simple) f.getConstraint()), false);
								} else {
									throw new IOException("Guarded failure may only use simple guided expressions at line " + gleft + ", position " + gright);
								}
							} else {
								throw new IOException("Guarded failure may only use simple guided expressions at line " + gleft + ", position " + gright);
							}
						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // guide ::= ALWAYS LPAREN bexpression AND simple RPAREN 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Always(b, s, true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // guide ::= ALWAYS bexpression AND simple 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Always(b, s, true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // guide ::= ALWAYS LPAREN bexpression BAR simple RPAREN 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Always(b, s, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // guide ::= ALWAYS bexpression BAR simple 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Always(b, s, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // guide ::= ALWAYS bexpression 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Always(b, null, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // guide ::= ALWAYS simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Always(null, s, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // guide ::= STAR simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Repeat(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // guide ::= number STAR guide 
            {
              Guide RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Times(n, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // guide ::= LPAREN guide RPAREN 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // guide ::= LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ConditionGuide(c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= guide EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide start_val = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // guide ::= simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

