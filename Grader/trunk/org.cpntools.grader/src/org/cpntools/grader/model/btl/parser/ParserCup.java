
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 07 10:36:40 CEST 2012
//----------------------------------------------------

package org.cpntools.grader.model.btl.parser;

import org.cpntools.grader.model.btl.model.*;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 07 10:36:40 CEST 2012
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\007\000\002\002\007\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\005\000\002\002\006" +
    "\000\002\003\006\000\002\004\002\000\002\004\003\000" +
    "\002\004\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\006\003\000\002\006\005\000\002\006" +
    "\003\000\002\006\003\000\002\006\004\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\007\003\000" +
    "\002\007\005\000\002\005\002\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\030\004\023\010\011\013\014\015\006\017" +
    "\022\020\016\021\013\022\017\040\021\042\020\043\010" +
    "\001\002\000\030\002\001\005\001\011\001\012\125\013" +
    "\001\014\001\015\001\016\001\026\124\040\001\041\001" +
    "\001\002\000\036\002\uffda\005\uffda\006\131\011\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\026\uffda\030\156" +
    "\037\056\040\uffda\041\uffda\001\002\000\030\004\023\010" +
    "\011\013\014\015\006\017\022\020\016\021\013\022\017" +
    "\040\021\042\020\043\010\001\002\000\022\002\154\013" +
    "\036\014\035\015\027\016\031\026\033\040\032\041\034" +
    "\001\002\000\032\005\uffcf\011\uffcf\012\uffcf\020\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\001\002\000\054\004\046\010\011\011\uffed\012" +
    "\052\013\014\015\006\017\044\020\016\021\013\022\017" +
    "\024\uffd0\025\uffd0\027\050\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\040\021\042\020\043\010\001\002\000\004" +
    "\020\133\001\002\000\030\002\uffd8\005\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\026\uffd8\040\uffd8" +
    "\041\uffd8\001\002\000\030\004\023\010\011\013\014\015" +
    "\006\017\022\020\016\021\013\022\017\040\021\042\020" +
    "\043\010\001\002\000\026\002\ufff1\005\ufff1\011\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\026\ufff1\040\ufff1\041\ufff1" +
    "\001\002\000\014\004\126\017\022\021\013\022\017\042" +
    "\020\001\002\000\030\002\uffd7\005\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\026\uffd7\040\uffd7\041" +
    "\uffd7\001\002\000\036\002\uffd2\005\uffd2\006\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\026\uffd2\030" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002\000\004\010\145" +
    "\001\002\000\014\004\126\017\022\021\013\022\017\042" +
    "\020\001\002\000\030\004\023\010\011\013\014\015\025" +
    "\017\022\020\016\021\013\022\017\040\021\042\020\043" +
    "\010\001\002\000\024\005\123\012\125\013\001\014\001" +
    "\015\001\016\001\026\124\040\001\041\001\001\002\000" +
    "\030\004\023\010\011\013\014\015\006\017\022\020\016" +
    "\021\013\022\017\040\021\042\020\043\010\001\002\000" +
    "\022\005\030\013\036\014\035\015\027\016\031\026\033" +
    "\040\032\041\034\001\002\000\030\004\023\010\011\013" +
    "\014\015\006\017\022\020\016\021\013\022\017\040\021" +
    "\042\020\043\010\001\002\000\026\002\ufffe\005\ufffe\011" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\026\ufffe\040\ufffe" +
    "\041\ufffe\001\002\000\030\004\023\010\011\013\014\015" +
    "\006\017\022\020\016\021\013\022\017\040\021\042\020" +
    "\043\010\001\002\000\004\010\136\001\002\000\030\004" +
    "\023\010\011\013\014\015\006\017\022\020\016\021\013" +
    "\022\017\040\021\042\020\043\010\001\002\000\004\010" +
    "\042\001\002\000\032\004\023\010\011\013\014\015\006" +
    "\017\022\020\016\021\013\022\017\023\041\040\021\042" +
    "\020\043\010\001\002\000\030\004\023\010\011\013\014" +
    "\015\006\017\022\020\016\021\013\022\017\040\021\042" +
    "\020\043\010\001\002\000\026\002\ufff9\005\ufff9\011\ufff9" +
    "\013\036\014\035\015\027\016\031\026\033\040\ufff9\041" +
    "\ufff9\001\002\000\026\002\ufffa\005\ufffa\011\ufffa\013\ufffa" +
    "\014\035\015\ufffa\016\031\026\033\040\ufffa\041\ufffa\001" +
    "\002\000\026\002\ufffb\005\ufffb\011\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\016\ufffb\026\ufffb\040\ufffb\041\ufffb\001\002\000" +
    "\054\004\046\010\011\011\uffed\012\052\013\014\015\006" +
    "\017\044\020\016\021\013\022\017\024\uffd0\025\uffd0\027" +
    "\050\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\021" +
    "\042\020\043\010\001\002\000\024\005\uffdc\020\133\024" +
    "\uffdc\025\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\001\002\000\042\004\121\012\052\017\044\020\uffd0\021" +
    "\013\022\017\024\uffd0\025\uffd0\027\050\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\042\020\043\010\001\002\000" +
    "\022\020\074\024\071\025\075\032\076\033\072\034\101" +
    "\035\100\036\073\001\002\000\054\004\046\005\uffd0\010" +
    "\011\012\052\013\014\015\025\017\044\020\016\021\013" +
    "\022\017\024\uffd0\025\uffd0\027\050\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\040\021\042\020\043\010\001\002" +
    "\000\010\011\uffeb\012\062\026\061\001\002\000\032\005" +
    "\uffdd\011\uffdd\012\uffdd\020\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\001\002\000" +
    "\004\011\060\001\002\000\004\042\020\001\002\000\022" +
    "\011\uffec\013\036\014\035\015\027\016\031\026\033\040" +
    "\032\041\034\001\002\000\006\012\055\037\056\001\002" +
    "\000\032\005\uffe1\011\uffe1\012\uffe1\020\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\001\002\000\004\042\057\001\002\000\036\002\uffd1\005" +
    "\uffd1\006\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\026\uffd1\030\uffd1\037\uffd1\040\uffd1\041\uffd1\001" +
    "\002\000\026\002\ufff5\005\ufff5\011\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\026\ufff5\040\ufff5\041\ufff5\001\002\000" +
    "\034\004\066\012\052\017\063\020\uffd0\024\uffd0\025\uffd0" +
    "\027\050\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\043" +
    "\010\001\002\000\034\004\066\012\052\017\063\020\uffd0" +
    "\024\uffd0\025\uffd0\027\050\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\043\010\001\002\000\034\004\066\012\052" +
    "\017\063\020\uffd0\024\uffd0\025\uffd0\027\050\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\043\010\001\002\000\012" +
    "\005\uffe4\011\uffe4\012\uffe4\026\uffe4\001\002\000\032\005" +
    "\uffdc\011\uffdc\012\uffdc\020\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\001\002\000" +
    "\036\004\066\005\uffd0\012\052\017\063\020\uffd0\024\uffd0" +
    "\025\uffd0\027\050\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\043\010\001\002\000\010\005\114\012\062\026\061" +
    "\001\002\000\024\005\077\020\074\024\071\025\075\032" +
    "\076\033\072\034\101\035\100\036\073\001\002\000\040" +
    "\004\103\005\uffd0\011\uffd0\012\052\020\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\050\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\043\010\001\002\000\026\004\103\005\uffd0\011" +
    "\uffd0\012\052\020\uffd0\024\uffd0\025\uffd0\026\uffd0\027\050" +
    "\043\010\001\002\000\026\004\103\005\uffd0\011\uffd0\012" +
    "\052\020\uffd0\024\uffd0\025\uffd0\026\uffd0\027\050\043\010" +
    "\001\002\000\040\004\103\005\uffd0\011\uffd0\012\052\020" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\050\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\043\010\001\002\000\040\004" +
    "\103\005\uffd0\011\uffd0\012\052\020\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\050\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\043\010\001\002\000\026\004\103\005\uffd0\011\uffd0" +
    "\012\052\020\uffd0\024\uffd0\025\uffd0\026\uffd0\027\050\043" +
    "\010\001\002\000\032\005\uffdb\011\uffdb\012\uffdb\020\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\001\002\000\026\004\103\005\uffd0\011\uffd0" +
    "\012\052\020\uffd0\024\uffd0\025\uffd0\026\uffd0\027\050\043" +
    "\010\001\002\000\026\004\103\005\uffd0\011\uffd0\012\052" +
    "\020\uffd0\024\uffd0\025\uffd0\026\uffd0\027\050\043\010\001" +
    "\002\000\020\005\uffe9\011\uffe9\012\uffe9\020\074\024\071" +
    "\025\075\026\uffe9\001\002\000\022\004\103\005\uffd0\012" +
    "\052\020\uffd0\024\uffd0\025\uffd0\027\050\043\010\001\002" +
    "\000\012\005\077\020\074\024\071\025\075\001\002\000" +
    "\020\005\uffe7\011\uffe7\012\uffe7\020\074\024\071\025\075" +
    "\026\uffe7\001\002\000\020\005\uffea\011\uffea\012\uffea\020" +
    "\074\024\071\025\075\026\uffea\001\002\000\032\005\uffe0" +
    "\011\uffe0\012\uffe0\020\uffe0\024\uffe0\025\uffe0\026\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\001\002\000\032" +
    "\005\uffde\011\uffde\012\uffde\020\uffde\024\071\025\075\026" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\001\002" +
    "\000\020\005\uffe6\011\uffe6\012\uffe6\020\074\024\071\025" +
    "\075\026\uffe6\001\002\000\020\005\uffe8\011\uffe8\012\uffe8" +
    "\020\074\024\071\025\075\026\uffe8\001\002\000\032\005" +
    "\uffdf\011\uffdf\012\uffdf\020\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\001\002\000" +
    "\012\005\uffe2\011\uffe2\012\uffe2\026\uffe2\001\002\000\012" +
    "\005\uffe3\011\uffe3\012\uffe3\026\uffe3\001\002\000\012\005" +
    "\uffe5\011\uffe5\012\uffe5\026\uffe5\001\002\000\030\002\uffd6" +
    "\005\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\026\uffd6\040\uffd6\041\uffd6\001\002\000\034\002\uffda" +
    "\005\uffda\006\131\011\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\026\uffda\037\056\040\uffda\041\uffda\001\002" +
    "\000\044\004\121\005\uffd0\012\052\017\044\020\uffd0\021" +
    "\013\022\017\024\uffd0\025\uffd0\027\050\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\042\020\043\010\001\002\000" +
    "\010\005\123\012\125\026\124\001\002\000\030\002\uffd3" +
    "\005\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\026\uffd3\040\uffd3\041\uffd3\001\002\000\014\004\126" +
    "\017\022\021\013\022\017\042\020\001\002\000\014\004" +
    "\126\017\022\021\013\022\017\042\020\001\002\000\014" +
    "\004\126\017\022\021\013\022\017\042\020\001\002\000" +
    "\030\002\uffd4\005\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\026\uffd4\040\uffd4\041\uffd4\001\002\000" +
    "\030\002\uffd5\005\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\026\uffd5\040\uffd5\041\uffd5\001\002\000" +
    "\004\007\132\001\002\000\030\002\uffd9\005\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\026\uffd9\040" +
    "\uffd9\041\uffd9\001\002\000\030\004\023\010\011\013\014" +
    "\015\006\017\022\020\016\021\013\022\017\040\021\042" +
    "\020\043\010\001\002\000\026\002\ufffd\005\ufffd\011\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\026\033\040\ufffd\041" +
    "\ufffd\001\002\000\026\002\ufff6\005\ufff6\011\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\026\ufff6\040\ufff6\041\ufff6\001" +
    "\002\000\054\004\046\010\011\011\uffed\012\052\013\014" +
    "\015\006\017\044\020\016\021\013\022\017\024\uffd0\025" +
    "\uffd0\027\050\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\040\021\042\020\043\010\001\002\000\004\011\140\001" +
    "\002\000\026\002\ufff4\005\ufff4\011\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\026\ufff4\040\ufff4\041\ufff4\001\002\000" +
    "\026\002\ufff8\005\ufff8\011\ufff8\013\ufff8\014\035\015\ufff8" +
    "\016\031\026\033\040\ufff8\041\ufff8\001\002\000\026\002" +
    "\ufff7\005\ufff7\011\ufff7\013\036\014\035\015\027\016\031" +
    "\026\033\040\ufff7\041\ufff7\001\002\000\022\005\ufff2\013" +
    "\036\014\035\015\027\016\031\026\033\040\ufff2\041\ufff2" +
    "\001\002\000\026\002\uffee\005\uffee\011\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\026\uffee\040\uffee\041\uffee\001\002" +
    "\000\054\004\046\010\011\011\uffed\012\052\013\014\015" +
    "\006\017\044\020\016\021\013\022\017\024\uffd0\025\uffd0" +
    "\027\050\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040" +
    "\021\042\020\043\010\001\002\000\004\011\147\001\002" +
    "\000\026\002\uffef\005\uffef\011\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\026\uffef\040\uffef\041\uffef\001\002\000\030" +
    "\002\ufffc\005\ufffc\011\ufffc\012\125\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\026\124\040\ufffc\041\ufffc\001\002\000\026" +
    "\002\ufff3\005\ufff3\011\ufff3\013\036\014\035\015\027\016" +
    "\031\026\033\040\ufff3\041\ufff3\001\002\000\004\011\153" +
    "\001\002\000\026\002\uffff\005\uffff\011\uffff\013\uffff\014" +
    "\uffff\015\uffff\016\uffff\026\uffff\040\uffff\041\uffff\001\002" +
    "\000\004\002\000\001\002\000\026\002\ufff2\005\ufff2\011" +
    "\ufff2\013\036\014\035\015\027\016\031\026\033\040\ufff2" +
    "\041\ufff2\001\002\000\004\042\157\001\002\000\026\002" +
    "\ufff0\005\ufff0\011\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\026\ufff0\040\ufff0\041\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\014\002\006\003\014\005\011\006\003\007" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\154\003\014\005\011\006\003\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\052\003\014" +
    "\004\151\005\042\006\003\007\004\010\044\011\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\150" +
    "\003\014\005\011\006\003\007\004\001\001\000\002\001" +
    "\001\000\006\006\147\007\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\116\007" +
    "\117\001\001\000\014\002\025\003\014\005\011\006\023" +
    "\007\004\001\001\000\002\001\001\000\014\002\142\003" +
    "\014\005\011\006\003\007\004\001\001\000\002\001\001" +
    "\000\014\002\141\003\014\005\011\006\003\007\004\001" +
    "\001\000\002\001\001\000\014\002\140\003\014\005\011" +
    "\006\003\007\004\001\001\000\002\001\001\000\014\002" +
    "\134\003\014\005\011\006\003\007\004\001\001\000\002" +
    "\001\001\000\014\002\037\003\014\005\011\006\003\007" +
    "\004\001\001\000\014\002\036\003\014\005\011\006\003" +
    "\007\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\052\003\014\004\050\005\042" +
    "\006\003\007\004\010\044\011\046\001\001\000\002\001" +
    "\001\000\014\005\064\006\116\007\117\010\044\011\114" +
    "\001\001\000\002\001\001\000\020\002\025\003\014\005" +
    "\042\006\023\007\004\010\067\011\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\064\010\044\011\115\001\001\000\010" +
    "\005\064\010\044\011\063\001\001\000\010\005\064\010" +
    "\044\011\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\064\010\067\011\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\064\010\112\001\001" +
    "\000\006\005\064\010\111\001\001\000\006\005\064\010" +
    "\110\001\001\000\006\005\064\010\107\001\001\000\006" +
    "\005\064\010\106\001\001\000\006\005\064\010\105\001" +
    "\001\000\002\001\001\000\006\005\064\010\104\001\001" +
    "\000\006\005\064\010\101\001\001\000\002\001\001\000" +
    "\006\005\064\010\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\064\006\121" +
    "\007\117\010\067\011\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\127\007\117\001\001\000\006" +
    "\006\126\007\117\001\001\000\006\006\121\007\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\133\003\014\005\011\006" +
    "\003\007\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\052\003\014\004\136\005\042\006\003\007" +
    "\004\010\044\011\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\052\003\014\004\145" +
    "\005\042\006\003\007\004\010\044\011\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/**
	 * @see java_cup.runtime.lr_parser#report_error(java.lang.String, java.lang.Object)
	 */
	public void report_error(String message, Object info) { /* Ignore simple error */
	}

	/**
	 * @see java_cup.runtime.lr_parser#report_fatal_error(java.lang.String, java.lang.Object)
	 */
	public void report_fatal_error(String message, Object info) throws Exception {
		StringBuilder m = new StringBuilder("Error");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

			if (s.left >= 0) {
				m.append(" in line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}

		m.append(" : "+message);

		throw new SyntaxParserException(m.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // number ::= NUMBER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // number ::= 
            {
              Integer RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // name ::= name DOT ID 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = n + "." + i.trim(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // name ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i.trim(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple ::= LPAREN simple RPAREN 
            {
              Simple RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple ::= simple BAR simple 
            {
              Simple RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Simple s1 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s2 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SimpleOr(s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple ::= simple AND simple 
            {
              Simple RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Simple s1 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s2 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SimpleAnd(s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // simple ::= NOT simple 
            {
              Simple RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Not(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple ::= FALSE 
            {
              Simple RESULT =null;
		 RESULT = new Not(True.INSTANCE); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple ::= TRUE 
            {
              Simple RESULT =null;
		 RESULT = True.INSTANCE; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple ::= name LPAREN2 RPAREN2 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Transition(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple ::= name 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Transition(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // iexpression ::= LPAREN iexpression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // iexpression ::= number 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Constant(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iexpression ::= TIME 
            {
              IExpression RESULT =null;
		 RESULT = Time.INSTANCE; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iexpression ::= iexpression STAR iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Multiplication(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // iexpression ::= iexpression MINUS iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iexpression ::= iexpression PLUS iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iexpression ::= BAR name BAR 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Place(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bexpression ::= LPAREN bexpression RPAREN 
            {
              BExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = b; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bexpression ::= NOT bexpression 
            {
              BExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalNot(b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bexpression ::= bexpression BAR bexpression 
            {
              BExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b1 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b2 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalOr(b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bexpression ::= bexpression AND bexpression 
            {
              BExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b1 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b2 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalAnd(b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bexpression ::= iexpression EQUAL iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Equal(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bexpression ::= iexpression GEQ iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LessEqual(e2, e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bexpression ::= iexpression GREATER iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Less(e2, e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bexpression ::= iexpression LEQ iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LessEqual(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bexpression ::= iexpression LESS iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Less(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condition ::= bexpression 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression e = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condition ::= guide 
            {
              Condition RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condition ::= 
            {
              Condition RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parenstep ::= LPAREN STEP guide RPAREN 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parenstep",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // guide ::= FINALLY LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Finally(null, c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // guide ::= name ASSIGN ID 
            {
              Guide RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SetMarking(n, i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // guide ::= parenstep 
            {
              Guide RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide p = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Future(p); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // guide ::= STEP guide 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Future(g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // guide ::= NEXT guide 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(True.INSTANCE, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // guide ::= guide FINALLY LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new And(g1, new Finally(g1, c)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // guide ::= guide FINALLYGUARD LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Finally(g1, c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // guide ::= guide AND guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, g2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // guide ::= guide STEP guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, new Guard(g1, new Future(g2))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // guide ::= guide GUARDSTEP guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(g1, new Future(g2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // guide ::= guide NEXT guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, new Guard(g1, g2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // guide ::= guide GUARD guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(g1, g2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // guide ::= guide GUARD FAILURE 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
							if (g instanceof Simple) {
								RESULT = new Avoid(g);
							} else if (g instanceof Future) {
								Future f = (Future) g;
								if (f.getConstraint() instanceof Simple) {
									RESULT = new AvoidForever(f.getConstraint());
								} else {
									throw new IOException("Guarded failure may only use simple guided expressions at line " + gleft + ", position " + gright);
								}
							} else {
								throw new IOException("Guarded failure may only use simple guided expressions at line " + gleft + ", position " + gright);
							}
						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // guide ::= STAR simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Repeat(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // guide ::= number STAR guide 
            {
              Guide RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Times(n, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // guide ::= LPAREN guide RPAREN 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // guide ::= LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ConditionGuide(c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= guide EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide start_val = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // guide ::= simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

