
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 08 11:25:52 CEST 2012
//----------------------------------------------------

package org.cpntools.grader.model.btl.parser;

import org.cpntools.grader.model.btl.model.*;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 08 11:25:52 CEST 2012
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\006\000" +
    "\002\002\010\000\002\002\006\000\002\002\010\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\007" +
    "\000\002\002\007\000\002\002\004\000\002\002\004\000" +
    "\002\002\003\000\002\002\005\000\002\002\006\000\002" +
    "\003\006\000\002\004\002\000\002\004\003\000\002\004" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\006\003\000\002\006\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\007\003\000\002\007" +
    "\005\000\002\005\002\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\032\004\024\010\013\013\016\015\007\017" +
    "\023\020\017\021\004\022\014\023\020\041\022\043\021" +
    "\044\011\001\002\000\042\004\162\012\053\017\045\020" +
    "\uffca\022\014\023\020\025\uffca\026\uffca\030\051\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\043\021\044\011\001" +
    "\002\000\030\002\001\005\001\011\001\012\126\013\001" +
    "\014\001\015\001\016\001\027\125\041\001\042\001\001" +
    "\002\000\036\002\uffd4\005\uffd4\006\132\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\027\uffd4\031\157\040" +
    "\057\041\uffd4\042\uffd4\001\002\000\032\004\024\010\013" +
    "\013\016\015\007\017\023\020\017\021\004\022\014\023" +
    "\020\041\022\043\021\044\011\001\002\000\022\002\155" +
    "\013\037\014\036\015\030\016\032\027\034\041\033\042" +
    "\035\001\002\000\050\002\uffc9\005\uffc9\011\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\020\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\041\uffc9\042\uffc9\001\002\000\004\020\134\001\002\000" +
    "\056\004\047\010\013\011\uffe7\012\053\013\016\015\007" +
    "\017\045\020\017\021\004\022\014\023\020\025\uffca\026" +
    "\uffca\030\051\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\041\022\043\021\044\011\001\002\000\030\002\uffd2\005" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\027\uffd2\041\uffd2\042\uffd2\001\002\000\026\002\uffeb\005" +
    "\uffeb\011\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\027\uffeb" +
    "\041\uffeb\042\uffeb\001\002\000\032\004\024\010\013\013" +
    "\016\015\007\017\023\020\017\021\004\022\014\023\020" +
    "\041\022\043\021\044\011\001\002\000\014\004\127\017" +
    "\023\022\014\023\020\043\021\001\002\000\030\002\uffd1" +
    "\005\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\027\uffd1\041\uffd1\042\uffd1\001\002\000\036\002\uffcc" +
    "\005\uffcc\006\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\027\uffcc\031\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\001\002\000\004\010\146\001\002\000\014\004\127\017" +
    "\023\022\014\023\020\043\021\001\002\000\032\004\024" +
    "\010\013\013\016\015\026\017\023\020\017\021\004\022" +
    "\014\023\020\041\022\043\021\044\011\001\002\000\024" +
    "\005\124\012\126\013\001\014\001\015\001\016\001\027" +
    "\125\041\001\042\001\001\002\000\032\004\024\010\013" +
    "\013\016\015\007\017\023\020\017\021\004\022\014\023" +
    "\020\041\022\043\021\044\011\001\002\000\022\005\031" +
    "\013\037\014\036\015\030\016\032\027\034\041\033\042" +
    "\035\001\002\000\032\004\024\010\013\013\016\015\007" +
    "\017\023\020\017\021\004\022\014\023\020\041\022\043" +
    "\021\044\011\001\002\000\026\002\ufffe\005\ufffe\011\ufffe" +
    "\013\ufffe\014\ufffe\015\ufffe\016\ufffe\027\ufffe\041\ufffe\042" +
    "\ufffe\001\002\000\032\004\024\010\013\013\016\015\007" +
    "\017\023\020\017\021\004\022\014\023\020\041\022\043" +
    "\021\044\011\001\002\000\004\010\137\001\002\000\032" +
    "\004\024\010\013\013\016\015\007\017\023\020\017\021" +
    "\004\022\014\023\020\041\022\043\021\044\011\001\002" +
    "\000\004\010\043\001\002\000\034\004\024\010\013\013" +
    "\016\015\007\017\023\020\017\021\004\022\014\023\020" +
    "\024\041\041\022\043\021\044\011\001\002\000\032\004" +
    "\024\010\013\013\016\015\007\017\023\020\017\021\004" +
    "\022\014\023\020\041\022\043\021\044\011\001\002\000" +
    "\026\002\ufff3\005\ufff3\011\ufff3\013\037\014\036\015\030" +
    "\016\032\027\034\041\ufff3\042\ufff3\001\002\000\026\002" +
    "\ufff5\005\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5" +
    "\027\ufff5\041\ufff5\042\ufff5\001\002\000\026\002\ufff4\005" +
    "\ufff4\011\ufff4\013\ufff4\014\036\015\ufff4\016\032\027\034" +
    "\041\ufff4\042\ufff4\001\002\000\056\004\047\010\013\011" +
    "\uffe7\012\053\013\016\015\007\017\045\020\017\021\004" +
    "\022\014\023\020\025\uffca\026\uffca\030\051\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\041\022\043\021\044\011" +
    "\001\002\000\024\005\uffd6\020\134\025\uffd6\026\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\001\002\000\042" +
    "\004\122\012\053\017\045\020\uffca\022\014\023\020\025" +
    "\uffca\026\uffca\030\051\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\043\021\044\011\001\002\000\022\020\075\025" +
    "\072\026\076\033\077\034\073\035\102\036\101\037\074" +
    "\001\002\000\056\004\047\005\uffca\010\013\012\053\013" +
    "\016\015\026\017\045\020\017\021\004\022\014\023\020" +
    "\025\uffca\026\uffca\030\051\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\041\022\043\021\044\011\001\002\000\010" +
    "\011\uffe5\012\063\027\062\001\002\000\050\002\uffd7\005" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\020\uffd7\025\uffd7\026\uffd7\027\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\001\002\000\004" +
    "\011\061\001\002\000\004\043\021\001\002\000\022\011" +
    "\uffe6\013\037\014\036\015\030\016\032\027\034\041\033" +
    "\042\035\001\002\000\006\012\056\040\057\001\002\000" +
    "\050\002\uffdb\005\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\020\uffdb\025\uffdb\026\uffdb\027\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\001\002\000\004\043\060\001\002\000\036\002\uffcb\005" +
    "\uffcb\006\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\027\uffcb\031\uffcb\040\uffcb\041\uffcb\042\uffcb\001" +
    "\002\000\026\002\uffef\005\uffef\011\uffef\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\027\uffef\041\uffef\042\uffef\001\002\000" +
    "\034\004\067\012\053\017\064\020\uffca\025\uffca\026\uffca" +
    "\030\051\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\044" +
    "\011\001\002\000\034\004\067\012\053\017\064\020\uffca" +
    "\025\uffca\026\uffca\030\051\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\044\011\001\002\000\034\004\067\012\053" +
    "\017\064\020\uffca\025\uffca\026\uffca\030\051\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\044\011\001\002\000\030" +
    "\002\uffde\005\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\027\uffde\041\uffde\042\uffde\001\002\000\050" +
    "\002\uffd6\005\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\025\uffd6\026\uffd6\027\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\001" +
    "\002\000\036\004\067\005\uffca\012\053\017\064\020\uffca" +
    "\025\uffca\026\uffca\030\051\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\044\011\001\002\000\010\005\115\012\063" +
    "\027\062\001\002\000\024\005\100\020\075\025\072\026" +
    "\076\033\077\034\073\035\102\036\101\037\074\001\002" +
    "\000\056\002\uffca\004\104\005\uffca\011\uffca\012\053\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\020\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\051\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\041\uffca\042\uffca\044\011\001\002\000\044\002\uffca" +
    "\004\104\005\uffca\011\uffca\012\053\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\020\uffca\025\uffca\026\uffca\027\uffca\030\051" +
    "\041\uffca\042\uffca\044\011\001\002\000\044\002\uffca\004" +
    "\104\005\uffca\011\uffca\012\053\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\020\uffca\025\uffca\026\uffca\027\uffca\030\051\041" +
    "\uffca\042\uffca\044\011\001\002\000\056\002\uffca\004\104" +
    "\005\uffca\011\uffca\012\053\013\uffca\014\uffca\015\uffca\016" +
    "\uffca\020\uffca\025\uffca\026\uffca\027\uffca\030\051\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\041\uffca\042\uffca\044" +
    "\011\001\002\000\056\002\uffca\004\104\005\uffca\011\uffca" +
    "\012\053\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\051\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\041\uffca\042\uffca\044\011\001\002\000" +
    "\044\002\uffca\004\104\005\uffca\011\uffca\012\053\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\020\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\051\041\uffca\042\uffca\044\011\001\002\000\050" +
    "\002\uffd5\005\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\020\uffd5\025\uffd5\026\uffd5\027\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\001" +
    "\002\000\044\002\uffca\004\104\005\uffca\011\uffca\012\053" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\051\041\uffca\042\uffca\044\011\001\002" +
    "\000\044\002\uffca\004\104\005\uffca\011\uffca\012\053\013" +
    "\uffca\014\uffca\015\uffca\016\uffca\020\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\051\041\uffca\042\uffca\044\011\001\002\000" +
    "\036\002\uffe3\005\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\020\075\025\072\026\076\027\uffe3\041" +
    "\uffe3\042\uffe3\001\002\000\022\004\104\005\uffca\012\053" +
    "\020\uffca\025\uffca\026\uffca\030\051\044\011\001\002\000" +
    "\012\005\100\020\075\025\072\026\076\001\002\000\036" +
    "\002\uffe1\005\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\020\075\025\072\026\076\027\uffe1\041\uffe1" +
    "\042\uffe1\001\002\000\036\002\uffe4\005\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\075\025\072" +
    "\026\076\027\uffe4\041\uffe4\042\uffe4\001\002\000\050\002" +
    "\uffda\005\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\020\uffda\025\uffda\026\uffda\027\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\041\uffda\042\uffda\001\002" +
    "\000\050\002\uffd8\005\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\020\uffd8\025\072\026\076\027\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8\042" +
    "\uffd8\001\002\000\036\002\uffe0\005\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\075\025\072\026" +
    "\076\027\uffe0\041\uffe0\042\uffe0\001\002\000\036\002\uffe2" +
    "\005\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\020\075\025\072\026\076\027\uffe2\041\uffe2\042\uffe2" +
    "\001\002\000\050\002\uffd9\005\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041" +
    "\uffd9\042\uffd9\001\002\000\030\002\uffdc\005\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\027\uffdc\041" +
    "\uffdc\042\uffdc\001\002\000\030\002\uffdd\005\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\027\uffdd\041" +
    "\uffdd\042\uffdd\001\002\000\030\002\uffdf\005\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\027\uffdf\041" +
    "\uffdf\042\uffdf\001\002\000\030\002\uffd0\005\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\027\uffd0\041" +
    "\uffd0\042\uffd0\001\002\000\034\002\uffd4\005\uffd4\006\132" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\027" +
    "\uffd4\040\057\041\uffd4\042\uffd4\001\002\000\044\004\122" +
    "\005\uffca\012\053\017\045\020\uffca\022\014\023\020\025" +
    "\uffca\026\uffca\030\051\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\043\021\044\011\001\002\000\010\005\124\012" +
    "\126\027\125\001\002\000\030\002\uffcd\005\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\027\uffcd\041" +
    "\uffcd\042\uffcd\001\002\000\014\004\127\017\023\022\014" +
    "\023\020\043\021\001\002\000\014\004\127\017\023\022" +
    "\014\023\020\043\021\001\002\000\014\004\127\017\023" +
    "\022\014\023\020\043\021\001\002\000\030\002\uffce\005" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\027\uffce\041\uffce\042\uffce\001\002\000\030\002\uffcf\005" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\027\uffcf\041\uffcf\042\uffcf\001\002\000\004\007\133\001" +
    "\002\000\030\002\uffd3\005\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\027\uffd3\041\uffd3\042\uffd3\001" +
    "\002\000\032\004\024\010\013\013\016\015\007\017\023" +
    "\020\017\021\004\022\014\023\020\041\022\043\021\044" +
    "\011\001\002\000\026\002\ufffd\005\ufffd\011\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\027\034\041\ufffd\042\ufffd\001" +
    "\002\000\026\002\ufff0\005\ufff0\011\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\027\ufff0\041\ufff0\042\ufff0\001\002\000" +
    "\056\004\047\010\013\011\uffe7\012\053\013\016\015\007" +
    "\017\045\020\017\021\004\022\014\023\020\025\uffca\026" +
    "\uffca\030\051\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\041\022\043\021\044\011\001\002\000\004\011\141\001" +
    "\002\000\026\002\uffee\005\uffee\011\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\027\uffee\041\uffee\042\uffee\001\002\000" +
    "\026\002\ufff2\005\ufff2\011\ufff2\013\ufff2\014\036\015\ufff2" +
    "\016\032\027\034\041\ufff2\042\ufff2\001\002\000\026\002" +
    "\ufff1\005\ufff1\011\ufff1\013\037\014\036\015\030\016\032" +
    "\027\034\041\ufff1\042\ufff1\001\002\000\022\005\uffec\013" +
    "\037\014\036\015\030\016\032\027\034\041\uffec\042\uffec" +
    "\001\002\000\026\002\uffe8\005\uffe8\011\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\027\uffe8\041\uffe8\042\uffe8\001\002" +
    "\000\056\004\047\010\013\011\uffe7\012\053\013\016\015" +
    "\007\017\045\020\017\021\004\022\014\023\020\025\uffca" +
    "\026\uffca\030\051\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\041\022\043\021\044\011\001\002\000\004\011\150" +
    "\001\002\000\026\002\uffe9\005\uffe9\011\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\027\uffe9\041\uffe9\042\uffe9\001\002" +
    "\000\030\002\ufffc\005\ufffc\011\ufffc\012\126\013\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\027\125\041\ufffc\042\ufffc\001\002" +
    "\000\026\002\uffed\005\uffed\011\uffed\013\037\014\036\015" +
    "\030\016\032\027\034\041\uffed\042\uffed\001\002\000\004" +
    "\011\154\001\002\000\026\002\uffff\005\uffff\011\uffff\013" +
    "\uffff\014\uffff\015\uffff\016\uffff\027\uffff\041\uffff\042\uffff" +
    "\001\002\000\004\002\000\001\002\000\026\002\uffec\005" +
    "\uffec\011\uffec\013\037\014\036\015\030\016\032\027\034" +
    "\041\uffec\042\uffec\001\002\000\004\043\160\001\002\000" +
    "\026\002\uffea\005\uffea\011\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\027\uffea\041\uffea\042\uffea\001\002\000\030\002" +
    "\ufffb\005\ufffb\011\ufffb\012\126\013\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\027\125\041\ufffb\042\ufffb\001\002\000\044\004" +
    "\122\005\uffca\012\053\017\045\020\uffca\022\014\023\020" +
    "\025\uffca\026\uffca\030\051\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\043\021\044\011\001\002\000\030\002\ufffa" +
    "\005\ufffa\011\ufffa\012\165\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\027\164\041\ufffa\042\ufffa\001\002\000\042\004\122" +
    "\012\053\017\045\020\uffca\022\014\023\020\025\uffca\026" +
    "\uffca\030\051\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\043\021\044\011\001\002\000\042\004\122\012\053\017" +
    "\045\020\uffca\022\014\023\020\025\uffca\026\uffca\030\051" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\043\021\044" +
    "\011\001\002\000\030\002\ufff9\005\ufff9\011\ufff9\012\126" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\027\ufff9\041\ufff9\042" +
    "\ufff9\001\002\000\030\002\ufff7\005\ufff7\011\ufff7\012\126" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\027\ufff7\041\ufff7\042" +
    "\ufff7\001\002\000\010\005\115\012\172\027\171\001\002" +
    "\000\042\004\122\012\053\017\045\020\uffca\022\014\023" +
    "\020\025\uffca\026\uffca\030\051\033\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\043\021\044\011\001\002\000\042\004" +
    "\122\012\053\017\045\020\uffca\022\014\023\020\025\uffca" +
    "\026\uffca\030\051\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\043\021\044\011\001\002\000\010\005\174\012\126" +
    "\027\125\001\002\000\026\002\ufff8\005\ufff8\011\ufff8\013" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\027\ufff8\041\ufff8\042\ufff8" +
    "\001\002\000\010\005\176\012\126\027\125\001\002\000" +
    "\026\002\ufff6\005\ufff6\011\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\027\ufff6\041\ufff6\042\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\014\002\007\003\014\005\011\006\004\007" +
    "\005\001\001\000\014\005\065\006\160\007\120\010\045" +
    "\011\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\155\003\014\005\011\006\004\007\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\053\003\014\004\152\005\043\006\004\007\005" +
    "\010\045\011\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\151\003\014\005\011\006\004\007\005" +
    "\001\001\000\006\006\150\007\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\117" +
    "\007\120\001\001\000\014\002\026\003\014\005\011\006" +
    "\024\007\005\001\001\000\002\001\001\000\014\002\143" +
    "\003\014\005\011\006\004\007\005\001\001\000\002\001" +
    "\001\000\014\002\142\003\014\005\011\006\004\007\005" +
    "\001\001\000\002\001\001\000\014\002\141\003\014\005" +
    "\011\006\004\007\005\001\001\000\002\001\001\000\014" +
    "\002\135\003\014\005\011\006\004\007\005\001\001\000" +
    "\002\001\001\000\014\002\041\003\014\005\011\006\004" +
    "\007\005\001\001\000\014\002\037\003\014\005\011\006" +
    "\004\007\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\053\003\014\004\051\005" +
    "\043\006\004\007\005\010\045\011\047\001\001\000\002" +
    "\001\001\000\014\005\065\006\117\007\120\010\045\011" +
    "\115\001\001\000\002\001\001\000\020\002\026\003\014" +
    "\005\043\006\024\007\005\010\070\011\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\065\010\045\011\116\001\001\000" +
    "\010\005\065\010\045\011\064\001\001\000\010\005\065" +
    "\010\045\011\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\065\010\070\011\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\065\010\113\001" +
    "\001\000\006\005\065\010\112\001\001\000\006\005\065" +
    "\010\111\001\001\000\006\005\065\010\110\001\001\000" +
    "\006\005\065\010\107\001\001\000\006\005\065\010\106" +
    "\001\001\000\002\001\001\000\006\005\065\010\105\001" +
    "\001\000\006\005\065\010\102\001\001\000\002\001\001" +
    "\000\006\005\065\010\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\065\006" +
    "\122\007\120\010\070\011\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\130\007\120\001\001\000" +
    "\006\006\127\007\120\001\001\000\006\006\122\007\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\134\003\014\005\011" +
    "\006\004\007\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\053\003\014\004\137\005\043\006\004" +
    "\007\005\010\045\011\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\053\003\014\004" +
    "\146\005\043\006\004\007\005\010\045\011\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\065\006\122\007\120" +
    "\010\070\011\167\001\001\000\002\001\001\000\014\005" +
    "\065\006\166\007\120\010\045\011\116\001\001\000\014" +
    "\005\065\006\165\007\120\010\045\011\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\065\006\174\007\120\010\045\011\116\001\001\000" +
    "\014\005\065\006\172\007\120\010\045\011\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/**
	 * @see java_cup.runtime.lr_parser#report_error(java.lang.String, java.lang.Object)
	 */
	public void report_error(String message, Object info) { /* Ignore simple error */
	}

	/**
	 * @see java_cup.runtime.lr_parser#report_fatal_error(java.lang.String, java.lang.Object)
	 */
	public void report_fatal_error(String message, Object info) throws Exception {
		StringBuilder m = new StringBuilder("Error");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

			if (s.left >= 0) {
				m.append(" in line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}

		m.append(" : "+message);

		throw new SyntaxParserException(m.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // number ::= NUMBER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // number ::= 
            {
              Integer RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // name ::= name DOT ID 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = n + "." + i.trim(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // name ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i.trim(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple ::= LPAREN simple RPAREN 
            {
              Simple RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple ::= simple BAR simple 
            {
              Simple RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Simple s1 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s2 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SimpleOr(s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple ::= simple AND simple 
            {
              Simple RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Simple s1 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s2 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SimpleAnd(s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple ::= NOT simple 
            {
              Simple RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Not(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple ::= FALSE 
            {
              Simple RESULT =null;
		 RESULT = new Not(True.INSTANCE); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple ::= TRUE 
            {
              Simple RESULT =null;
		 RESULT = True.INSTANCE; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple ::= name LPAREN2 RPAREN2 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Transition(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple ::= name 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Transition(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iexpression ::= LPAREN iexpression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iexpression ::= number 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Constant(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // iexpression ::= TIME 
            {
              IExpression RESULT =null;
		 RESULT = Time.INSTANCE; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iexpression ::= iexpression STAR iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Multiplication(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iexpression ::= iexpression MINUS iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // iexpression ::= iexpression PLUS iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // iexpression ::= BAR name BAR 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Place(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bexpression ::= LPAREN bexpression RPAREN 
            {
              BExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = b; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bexpression ::= NOT bexpression 
            {
              BExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalNot(b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bexpression ::= bexpression BAR bexpression 
            {
              BExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b1 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b2 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalOr(b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bexpression ::= bexpression AND bexpression 
            {
              BExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b1 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b2 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalAnd(b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bexpression ::= iexpression EQUAL iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Equal(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bexpression ::= iexpression GEQ iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LessEqual(e2, e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bexpression ::= iexpression GREATER iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Less(e2, e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bexpression ::= iexpression LEQ iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LessEqual(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bexpression ::= iexpression LESS iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Less(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= bexpression 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression e = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= guide 
            {
              Condition RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= 
            {
              Condition RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parenstep ::= LPAREN STEP guide RPAREN 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parenstep",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // guide ::= FINALLY LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Finally(null, c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // guide ::= name ASSIGN ID 
            {
              Guide RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SetMarking(n, i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // guide ::= parenstep 
            {
              Guide RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide p = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Future(p); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // guide ::= STEP guide 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Future(g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // guide ::= NEXT guide 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(True.INSTANCE, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // guide ::= guide FINALLY LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new And(g1, new Finally(g1, c)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // guide ::= guide FINALLYGUARD LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Finally(g1, c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // guide ::= guide AND guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, g2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // guide ::= guide STEP guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, new Guard(g1, new Future(g2))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // guide ::= guide GUARDSTEP guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(g1, new Future(g2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // guide ::= guide NEXT guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, new Guard(g1, g2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // guide ::= guide GUARD guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(g1, g2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // guide ::= guide GUARD FAILURE 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		
							if (g instanceof Simple) {
								RESULT = new Avoid(g);
							} else if (g instanceof Future) {
								Future f = (Future) g;
								if (f.getConstraint() instanceof Simple) {
									RESULT = new AvoidForever(f.getConstraint());
								} else {
									throw new IOException("Guarded failure may only use simple guided expressions at line " + gleft + ", position " + gright);
								}
							} else {
								throw new IOException("Guarded failure may only use simple guided expressions at line " + gleft + ", position " + gright);
							}
						
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // guide ::= ALWAYS LPAREN bexpression AND simple RPAREN 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Always(b, s, true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // guide ::= ALWAYS bexpression AND simple 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Always(b, s, true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // guide ::= ALWAYS LPAREN bexpression BAR simple RPAREN 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Always(b, s, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // guide ::= ALWAYS bexpression BAR simple 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Always(b, s, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // guide ::= ALWAYS bexpression 
            {
              Guide RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Always(b, null, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // guide ::= ALWAYS simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Always(null, s, false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // guide ::= STAR simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Repeat(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // guide ::= number STAR guide 
            {
              Guide RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Times(n, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // guide ::= LPAREN guide RPAREN 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // guide ::= LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ConditionGuide(c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= guide EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide start_val = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // guide ::= simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

