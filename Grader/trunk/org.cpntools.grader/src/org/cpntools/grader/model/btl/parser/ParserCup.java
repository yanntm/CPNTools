
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 27 18:23:41 CEST 2012
//----------------------------------------------------

package org.cpntools.grader.model.btl.parser;

import org.cpntools.grader.model.btl.model.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 27 18:23:41 CEST 2012
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\007\000\002" +
    "\002\007\000\002\002\004\000\002\002\004\000\002\002" +
    "\006\000\002\003\002\000\002\003\003\000\002\003\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\007\005\000\002\005\003\000" +
    "\002\005\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\006\003\000\002\006\005\000\002\004\002" +
    "\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\030\004\022\010\011\013\014\015\006\017" +
    "\021\020\015\021\013\022\016\034\020\036\017\037\010" +
    "\001\002\000\030\002\001\005\001\011\001\012\120\013" +
    "\001\014\001\015\001\016\001\025\117\034\001\035\001" +
    "\001\002\000\034\002\uffdf\005\uffdf\006\145\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\025\uffdf\033\052" +
    "\034\uffdf\035\uffdf\001\002\000\030\004\022\010\011\013" +
    "\014\015\006\017\021\020\015\021\013\022\016\034\020" +
    "\036\017\037\010\001\002\000\022\002\143\013\034\014" +
    "\033\015\025\016\026\025\031\034\030\035\032\001\002" +
    "\000\032\005\uffd4\011\uffd4\012\uffd4\020\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\001\002\000\052\004\043\010\011\011\ufff1\012\046\013" +
    "\014\015\006\017\041\020\015\021\013\022\016\023\uffd5" +
    "\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\034" +
    "\020\036\017\037\010\001\002\000\004\020\124\001\002" +
    "\000\030\002\uffdd\005\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\025\uffdd\034\uffdd\035\uffdd\001\002" +
    "\000\030\004\022\010\011\013\014\015\006\017\021\020" +
    "\015\021\013\022\016\034\020\036\017\037\010\001\002" +
    "\000\014\004\121\017\021\021\013\022\016\036\017\001" +
    "\002\000\030\002\uffdc\005\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\025\uffdc\034\uffdc\035\uffdc\001" +
    "\002\000\034\002\uffd7\005\uffd7\006\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\025\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\001\002\000\004\010\134\001\002\000\014" +
    "\004\121\017\021\021\013\022\016\036\017\001\002\000" +
    "\030\004\022\010\011\013\014\015\006\017\021\020\015" +
    "\021\013\022\016\034\020\036\017\037\010\001\002\000" +
    "\024\005\116\012\120\013\001\014\001\015\001\016\001" +
    "\025\117\034\001\035\001\001\002\000\022\005\027\013" +
    "\034\014\033\015\025\016\026\025\031\034\030\035\032" +
    "\001\002\000\030\004\022\010\011\013\014\015\006\017" +
    "\021\020\015\021\013\022\016\034\020\036\017\037\010" +
    "\001\002\000\030\004\022\010\011\013\014\015\006\017" +
    "\021\020\015\021\013\022\016\034\020\036\017\037\010" +
    "\001\002\000\026\002\ufffe\005\ufffe\011\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\025\ufffe\034\ufffe\035\ufffe\001\002" +
    "\000\004\010\127\001\002\000\030\004\022\010\011\013" +
    "\014\015\006\017\021\020\015\021\013\022\016\034\020" +
    "\036\017\037\010\001\002\000\004\010\037\001\002\000" +
    "\030\004\022\010\011\013\014\015\006\017\021\020\015" +
    "\021\013\022\016\034\020\036\017\037\010\001\002\000" +
    "\030\004\022\010\011\013\014\015\006\017\021\020\015" +
    "\021\013\022\016\034\020\036\017\037\010\001\002\000" +
    "\026\002\ufffa\005\ufffa\011\ufffa\013\034\014\033\015\025" +
    "\016\026\025\031\034\ufffa\035\ufffa\001\002\000\026\002" +
    "\ufffb\005\ufffb\011\ufffb\013\ufffb\014\033\015\ufffb\016\026" +
    "\025\031\034\ufffb\035\ufffb\001\002\000\052\004\043\010" +
    "\011\011\ufff1\012\046\013\014\015\006\017\041\020\015" +
    "\021\013\022\016\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\034\020\036\017\037\010\001\002" +
    "\000\024\005\uffe1\020\124\023\uffe1\024\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\001\002\000\040\004\114" +
    "\012\046\017\041\020\uffd5\021\013\022\016\023\uffd5\024" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\036\017" +
    "\037\010\001\002\000\022\020\070\023\065\024\071\026" +
    "\072\027\066\030\075\031\074\032\067\001\002\000\052" +
    "\004\043\005\uffd5\010\011\012\046\013\014\015\006\017" +
    "\041\020\015\021\013\022\016\023\uffd5\024\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\034\020\036\017\037" +
    "\010\001\002\000\010\011\uffef\012\055\025\056\001\002" +
    "\000\004\011\054\001\002\000\004\036\017\001\002\000" +
    "\022\011\ufff0\013\034\014\033\015\025\016\026\025\031" +
    "\034\030\035\032\001\002\000\006\012\051\033\052\001" +
    "\002\000\032\005\uffe5\011\uffe5\012\uffe5\020\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\001\002\000\004\036\053\001\002\000\034\002\uffd6" +
    "\005\uffd6\006\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\025\uffd6\033\uffd6\034\uffd6\035\uffd6\001\002" +
    "\000\026\002\ufff6\005\ufff6\011\ufff6\013\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\025\ufff6\034\ufff6\035\ufff6\001\002\000\032" +
    "\004\062\012\046\017\057\020\uffd5\023\uffd5\024\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\037\010\001\002" +
    "\000\032\004\062\012\046\017\057\020\uffd5\023\uffd5\024" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\037\010" +
    "\001\002\000\032\004\062\012\046\017\057\020\uffd5\023" +
    "\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\037\010\001\002\000\012\005\uffe9\011\uffe9\012\uffe9\025" +
    "\uffe9\001\002\000\032\005\uffe1\011\uffe1\012\uffe1\020\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\001\002\000\034\004\062\005\uffd5\012\046" +
    "\017\057\020\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\037\010\001\002\000\010\005\110" +
    "\012\055\025\056\001\002\000\024\005\073\020\070\023" +
    "\065\024\071\026\072\027\066\030\075\031\074\032\067" +
    "\001\002\000\036\004\077\005\uffd5\011\uffd5\012\046\020" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\037\010\001\002\000\024\004\077\005" +
    "\uffd5\011\uffd5\012\046\020\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\037\010\001\002\000\024\004\077\005\uffd5\011\uffd5\012" +
    "\046\020\uffd5\023\uffd5\024\uffd5\025\uffd5\037\010\001\002" +
    "\000\036\004\077\005\uffd5\011\uffd5\012\046\020\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\037\010\001\002\000\036\004\077\005\uffd5\011" +
    "\uffd5\012\046\020\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\037\010\001\002\000" +
    "\024\004\077\005\uffd5\011\uffd5\012\046\020\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\037\010\001\002\000\032\005\uffe0\011" +
    "\uffe0\012\uffe0\020\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\001\002\000\024\004" +
    "\077\005\uffd5\011\uffd5\012\046\020\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\037\010\001\002\000\024\004\077\005\uffd5\011" +
    "\uffd5\012\046\020\uffd5\023\uffd5\024\uffd5\025\uffd5\037\010" +
    "\001\002\000\020\005\uffed\011\uffed\012\uffed\020\070\023" +
    "\065\024\071\025\uffed\001\002\000\020\004\077\005\uffd5" +
    "\012\046\020\uffd5\023\uffd5\024\uffd5\037\010\001\002\000" +
    "\012\005\073\020\070\023\065\024\071\001\002\000\020" +
    "\005\uffeb\011\uffeb\012\uffeb\020\070\023\065\024\071\025" +
    "\uffeb\001\002\000\020\005\uffee\011\uffee\012\uffee\020\070" +
    "\023\065\024\071\025\uffee\001\002\000\032\005\uffe4\011" +
    "\uffe4\012\uffe4\020\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\001\002\000\032\005" +
    "\uffe2\011\uffe2\012\uffe2\020\uffe2\023\065\024\071\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\001\002\000" +
    "\020\005\uffea\011\uffea\012\uffea\020\070\023\065\024\071" +
    "\025\uffea\001\002\000\020\005\uffec\011\uffec\012\uffec\020" +
    "\070\023\065\024\071\025\uffec\001\002\000\032\005\uffe3" +
    "\011\uffe3\012\uffe3\020\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\001\002\000\012" +
    "\005\uffe6\011\uffe6\012\uffe6\025\uffe6\001\002\000\012\005" +
    "\uffe7\011\uffe7\012\uffe7\025\uffe7\001\002\000\012\005\uffe8" +
    "\011\uffe8\012\uffe8\025\uffe8\001\002\000\030\002\uffdb\005" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\025\uffdb\034\uffdb\035\uffdb\001\002\000\042\004\114\005" +
    "\uffd5\012\046\017\041\020\uffd5\021\013\022\016\023\uffd5" +
    "\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\036" +
    "\017\037\010\001\002\000\010\005\116\012\120\025\117" +
    "\001\002\000\030\002\uffd8\005\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\025\uffd8\034\uffd8\035\uffd8" +
    "\001\002\000\014\004\121\017\021\021\013\022\016\036" +
    "\017\001\002\000\014\004\121\017\021\021\013\022\016" +
    "\036\017\001\002\000\014\004\121\017\021\021\013\022" +
    "\016\036\017\001\002\000\030\002\uffd9\005\uffd9\011\uffd9" +
    "\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\025\uffd9\034" +
    "\uffd9\035\uffd9\001\002\000\030\002\uffda\005\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\025\uffda\034" +
    "\uffda\035\uffda\001\002\000\030\004\022\010\011\013\014" +
    "\015\006\017\021\020\015\021\013\022\016\034\020\036" +
    "\017\037\010\001\002\000\026\002\ufffd\005\ufffd\011\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\025\031\034\ufffd\035" +
    "\ufffd\001\002\000\026\002\ufff7\005\ufff7\011\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\025\ufff7\034\ufff7\035\ufff7\001" +
    "\002\000\052\004\043\010\011\011\ufff1\012\046\013\014" +
    "\015\006\017\041\020\015\021\013\022\016\023\uffd5\024" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\034\020" +
    "\036\017\037\010\001\002\000\004\011\131\001\002\000" +
    "\026\002\ufff5\005\ufff5\011\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\025\ufff5\034\ufff5\035\ufff5\001\002\000\026\002" +
    "\ufff9\005\ufff9\011\ufff9\013\ufff9\014\033\015\ufff9\016\026" +
    "\025\031\034\ufff9\035\ufff9\001\002\000\026\002\ufff8\005" +
    "\ufff8\011\ufff8\013\034\014\033\015\025\016\026\025\031" +
    "\034\ufff8\035\ufff8\001\002\000\052\004\043\010\011\011" +
    "\ufff1\012\046\013\014\015\006\017\041\020\015\021\013" +
    "\022\016\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\034\020\036\017\037\010\001\002\000\004" +
    "\011\136\001\002\000\026\002\ufff2\005\ufff2\011\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\025\ufff2\034\ufff2\035\ufff2" +
    "\001\002\000\030\002\ufffc\005\ufffc\011\ufffc\012\120\013" +
    "\ufffc\014\ufffc\015\ufffc\016\ufffc\025\117\034\ufffc\035\ufffc" +
    "\001\002\000\026\002\ufff4\005\ufff4\011\ufff4\013\034\014" +
    "\033\015\025\016\026\025\031\034\ufff4\035\ufff4\001\002" +
    "\000\004\011\142\001\002\000\026\002\uffff\005\uffff\011" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\025\uffff\034\uffff" +
    "\035\uffff\001\002\000\004\002\000\001\002\000\026\002" +
    "\ufff3\005\ufff3\011\ufff3\013\034\014\033\015\025\016\026" +
    "\025\031\034\ufff3\035\ufff3\001\002\000\004\007\146\001" +
    "\002\000\030\002\uffde\005\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\025\uffde\034\uffde\035\uffde\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\012\002\006\004\011\005\003\006\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\143" +
    "\004\011\005\003\006\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\046\003\140\004\037\005\003" +
    "\006\004\007\041\010\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\137\004\011\005\003\006\004" +
    "\001\001\000\006\005\136\006\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\112" +
    "\006\004\001\001\000\012\002\023\004\011\005\022\006" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\132\004\011\005\003\006\004\001\001\000\012\002" +
    "\131\004\011\005\003\006\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\125\004\011\005\003\006" +
    "\004\001\001\000\002\001\001\000\012\002\035\004\011" +
    "\005\003\006\004\001\001\000\012\002\034\004\011\005" +
    "\003\006\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\002\046\003\044\004\037\005\003\006\004\007" +
    "\041\010\043\001\001\000\002\001\001\000\014\004\060" +
    "\005\112\006\004\007\041\010\110\001\001\000\002\001" +
    "\001\000\016\002\023\004\037\005\022\006\004\007\063" +
    "\010\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\060\007\041\010\111\001\001" +
    "\000\010\004\060\007\041\010\057\001\001\000\010\004" +
    "\060\007\041\010\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\060\007\063\010\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\060\007\106" +
    "\001\001\000\006\004\060\007\105\001\001\000\006\004" +
    "\060\007\104\001\001\000\006\004\060\007\103\001\001" +
    "\000\006\004\060\007\102\001\001\000\006\004\060\007" +
    "\101\001\001\000\002\001\001\000\006\004\060\007\100" +
    "\001\001\000\006\004\060\007\075\001\001\000\002\001" +
    "\001\000\006\004\060\007\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\060\005\114\006\004" +
    "\007\063\010\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\122\006\004\001\001\000\006\005\121" +
    "\006\004\001\001\000\006\005\114\006\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\124\004\011" +
    "\005\003\006\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\046\003\127\004\037\005\003\006\004" +
    "\007\041\010\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\046" +
    "\003\134\004\037\005\003\006\004\007\041\010\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/**
	 * @see java_cup.runtime.lr_parser#report_error(java.lang.String, java.lang.Object)
	 */
	public void report_error(String message, Object info) { /* Ignore simple error */
	}

	/**
	 * @see java_cup.runtime.lr_parser#report_fatal_error(java.lang.String, java.lang.Object)
	 */
	public void report_fatal_error(String message, Object info) throws Exception {
		StringBuilder m = new StringBuilder("Error");

		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

			if (s.left >= 0) {
				m.append(" in line "+(s.left+1));
				if (s.right >= 0)
					m.append(", column "+(s.right+1));
			}
		}

		m.append(" : "+message);

		throw new SyntaxParserException(m.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // number ::= NUMBER 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = a; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // number ::= 
            {
              Integer RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("number",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // name ::= name DOT ID 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = n + "." + i.trim(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // name ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i.trim(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple ::= LPAREN simple RPAREN 
            {
              Simple RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple ::= simple BAR simple 
            {
              Simple RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Simple s1 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s2 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SimpleOr(s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple ::= simple AND simple 
            {
              Simple RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Simple s1 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s2 = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new SimpleAnd(s1, s2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple ::= NOT simple 
            {
              Simple RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Not(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple ::= FALSE 
            {
              Simple RESULT =null;
		 RESULT = new Not(new True()); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple ::= TRUE 
            {
              Simple RESULT =null;
		 RESULT = new True(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple ::= name LPAREN2 RPAREN2 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = new Transition(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple ::= name 
            {
              Simple RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Transition(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("simple",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iexpression ::= LPAREN iexpression RPAREN 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iexpression ::= number 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Constant(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iexpression ::= iexpression STAR iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Multiplication(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iexpression ::= iexpression MINUS iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Minus(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // iexpression ::= iexpression PLUS iexpression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Plus(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // iexpression ::= BAR name BAR 
            {
              IExpression RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Place(n); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("iexpression",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bexpression ::= LPAREN bexpression RPAREN 
            {
              BExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = b; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bexpression ::= NOT bexpression 
            {
              BExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalNot(b); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bexpression ::= bexpression BAR bexpression 
            {
              BExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b1 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b2 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalOr(b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bexpression ::= bexpression AND bexpression 
            {
              BExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		BExpression b1 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression b2 = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LogicalAnd(b1, b2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bexpression ::= iexpression EQUAL iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Equal(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bexpression ::= iexpression GEQ iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LessEqual(e2, e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bexpression ::= iexpression GREATER iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Less(e2, e1); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bexpression ::= iexpression LEQ iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new LessEqual(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bexpression ::= iexpression LESS iexpression 
            {
              BExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Less(e1, e2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bexpression",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condition ::= bexpression 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		BExpression e = (BExpression)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condition ::= guide 
            {
              Condition RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condition ::= 
            {
              Condition RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("condition",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // guide ::= FINALLY LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Finally(new True(), c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // guide ::= STEP guide 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(new Repeat(new True()), g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // guide ::= NEXT guide 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(new True(), g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // guide ::= guide FINALLY LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new And(g1, new Finally(g1, c)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // guide ::= guide FINALLYGUARD LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new Finally(g1, c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // guide ::= guide AND guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, g2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // guide ::= guide STEP guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, new Guard(g1, new Guard(new Repeat(new True()), g2))); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // guide ::= guide GUARDSTEP guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(g1, new Guard(new Repeat(new True()), g2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // guide ::= guide NEXT guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new And(g1, new Guard(g1, g2)); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // guide ::= guide GUARD guide 
            {
              Guide RESULT =null;
		int g1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int g1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Guide g1 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int g2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int g2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g2 = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Guard(g1, g2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // guide ::= STAR simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Repeat(s); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // guide ::= number STAR guide 
            {
              Guide RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = new Times(n, g); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // guide ::= LPAREN guide RPAREN 
            {
              Guide RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide g = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = g; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // guide ::= LPAREN3 condition RPAREN3 
            {
              Guide RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = new ConditionGuide(c); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= guide EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Guide start_val = (Guide)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // guide ::= simple 
            {
              Guide RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Simple s = (Simple)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("guide",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

